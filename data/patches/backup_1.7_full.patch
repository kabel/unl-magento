Index: app/code/core/Mage/Adminhtml/Block/Backup.php
===================================================================
--- app/code/core/Mage/Adminhtml/Block/Backup.php	(revision 142292)
+++ app/code/core/Mage/Adminhtml/Block/Backup.php	(working copy)
@@ -20,7 +20,7 @@
  *
  * @category    Mage
  * @package     Mage_Adminhtml
- * @copyright   Copyright (c) 2011 Magento Inc. (http://www.magentocommerce.com)
+ * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
  * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
  */
 
@@ -31,14 +31,14 @@
  * @package    Mage_Adminhtml
  * @author      Magento Core Team <core@magentocommerce.com>
  */
-
 class Mage_Adminhtml_Block_Backup extends Mage_Adminhtml_Block_Template
 {
-    public function __construct()
-    {
-        parent::__construct();
-        $this->setTemplate('backup/list.phtml');
-    }
+    /**
+     * Block's template
+     *
+     * @var string
+     */
+    protected $_template = 'backup/list.phtml';
 
     protected function _prepareLayout()
     {
@@ -46,14 +46,32 @@
         $this->setChild('createButton',
             $this->getLayout()->createBlock('adminhtml/widget_button')
                 ->setData(array(
-                    'label' => Mage::helper('backup')->__('Create Backup'),
-                    'onclick' => "window.location.href='" . $this->getUrl('*/*/create') . "'",
+                    'label' => Mage::helper('backup')->__('Database Backup'),
+                    'onclick' => "return backup.backup('" . Mage_Backup_Helper_Data::TYPE_DB . "')",
                     'class'  => 'task'
                 ))
         );
+        $this->setChild('createSnapshotButton',
+            $this->getLayout()->createBlock('adminhtml/widget_button')
+                ->setData(array(
+                    'label' => Mage::helper('backup')->__('System Backup'),
+                    'onclick' => "return backup.backup('" . Mage_Backup_Helper_Data::TYPE_SYSTEM_SNAPSHOT . "')",
+                    'class'  => ''
+                ))
+        );
+        $this->setChild('createMediaBackupButton',
+            $this->getLayout()->createBlock('adminhtml/widget_button')
+                ->setData(array(
+                    'label' => Mage::helper('backup')->__('Database and Media Backup'),
+                    'onclick' => "return backup.backup('" . Mage_Backup_Helper_Data::TYPE_MEDIA . "')",
+                    'class'  => ''
+                ))
+        );
         $this->setChild('backupsGrid',
             $this->getLayout()->createBlock('adminhtml/backup_grid')
         );
+
+        $this->setChild('dialogs', $this->getLayout()->createBlock('adminhtml/backup_dialogs'));
     }
 
     public function getCreateButtonHtml()
@@ -61,8 +79,38 @@
         return $this->getChildHtml('createButton');
     }
 
+    /**
+     * Generate html code for "Create System Snapshot" button
+     *
+     * @return string
+     */
+    public function getCreateSnapshotButtonHtml()
+    {
+        return $this->getChildHtml('createSnapshotButton');
+    }
+
+    /**
+     * Generate html code for "Create Media Backup" button
+     *
+     * @return string
+     */
+    public function getCreateMediaBackupButtonHtml()
+    {
+        return $this->getChildHtml('createMediaBackupButton');
+    }
+
     public function getGridHtml()
     {
         return $this->getChildHtml('backupsGrid');
     }
+
+    /**
+     * Generate html code for pop-up messages that will appear when user click on "Rollback" link
+     *
+     * @return string
+     */
+    public function getDialogsHtml()
+    {
+        return $this->getChildHtml('dialogs');
+    }
 }
Index: app/code/core/Mage/Adminhtml/Block/Backup/Dialogs.php
===================================================================
--- app/code/core/Mage/Adminhtml/Block/Backup/Dialogs.php	(revision 0)
+++ app/code/core/Mage/Adminhtml/Block/Backup/Dialogs.php	(revision 0)
@@ -0,0 +1,53 @@
+<?php
+/**
+ * Magento
+ *
+ * NOTICE OF LICENSE
+ *
+ * This source file is subject to the Open Software License (OSL 3.0)
+ * that is bundled with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://opensource.org/licenses/osl-3.0.php
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@magentocommerce.com so we can send you a copy immediately.
+ *
+ * DISCLAIMER
+ *
+ * Do not edit or add to this file if you wish to upgrade Magento to newer
+ * versions in the future. If you wish to customize Magento for your
+ * needs please refer to http://www.magentocommerce.com for more information.
+ *
+ * @category    Mage
+ * @package     Mage_Adminhtml
+ * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
+ * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
+ */
+
+/**
+ * Adminhtml rollback dialogs block
+ *
+ * @category   Mage
+ * @package    Mage_Adminhtml
+ * @author     Magento Core Team <core@magentocommerce.com>
+ */
+class Mage_Adminhtml_Block_Backup_Dialogs extends Mage_Adminhtml_Block_Template
+{
+    /**
+     * Block's template
+     *
+     * @var string
+     */
+    protected $_template = 'backup/dialogs.phtml';
+
+    /**
+     * Include backup.js file in page before rendering
+     *
+     * @see Mage_Core_Block_Abstract::_prepareLayout()
+     */
+    protected function _prepareLayout()
+    {
+        $this->getLayout()->getBlock('head')->addJs('mage/adminhtml/backup.js');
+        parent::_prepareLayout();
+    }
+}
Index: app/code/core/Mage/Adminhtml/Block/Backup/Grid.php
===================================================================
--- app/code/core/Mage/Adminhtml/Block/Backup/Grid.php	(revision 142292)
+++ app/code/core/Mage/Adminhtml/Block/Backup/Grid.php	(working copy)
@@ -20,7 +20,7 @@
  *
  * @category    Mage
  * @package     Mage_Adminhtml
- * @copyright   Copyright (c) 2011 Magento Inc. (http://www.magentocommerce.com)
+ * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
  * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
  */
 
@@ -52,7 +52,28 @@
     }
 
     /**
+     * Prepare mass action controls
+     *
+     * @return Mage_Adminhtml_Block_Backup_Grid
+     */
+    protected function _prepareMassaction()
+    {
+        $this->setMassactionIdField('id');
+        $this->getMassactionBlock()->setFormFieldName('ids');
+
+        $this->getMassactionBlock()->addItem('delete', array(
+             'label'=> Mage::helper('adminhtml')->__('Delete'),
+             'url'  => $this->getUrl('*/*/massDelete'),
+             'confirm' => Mage::helper('backup')->__('Are you sure you want to delete the selected backup(s)?')
+        ));
+
+        return $this;
+    }
+
+    /**
      * Configuration of grid
+     *
+     * @return Mage_Adminhtml_Block_Backup_Grid
      */
     protected function _prepareColumns()
     {
@@ -62,45 +83,58 @@
             'header'    => Mage::helper('backup')->__('Time'),
             'index'     => 'date_object',
             'type'      => 'datetime',
+            'width'     => 200
         ));
 
+        $this->addColumn('display_name', array(
+            'header'    => Mage::helper('backup')->__('Name'),
+            'index'     => 'display_name',
+            'filter'    => false,
+            'sortable'  => true,
+            'width'     => 350
+        ));
+
         $this->addColumn('size', array(
             'header'    => Mage::helper('backup')->__('Size, Bytes'),
             'index'     => 'size',
             'type'      => 'number',
-            'sortable'  => false,
+            'sortable'  => true,
             'filter'    => false
         ));
 
         $this->addColumn('type', array(
             'header'    => Mage::helper('backup')->__('Type'),
             'type'      => 'options',
-            'options'   => array('db' => Mage::helper('backup')->__('DB')),
-            'index'     =>'type'
+            'options'   => Mage::helper('backup')->getBackupTypes(),
+            'index'     => 'type',
+            'width'     => 300
         ));
 
         $this->addColumn('download', array(
             'header'    => Mage::helper('backup')->__('Download'),
-            'format'    => '<a href="' . $this->getUrl('*/*/download', array('time' => '$time', 'type' => '$type')) .'">gz</a> &nbsp; <small>('.$url7zip.')</small>',
+            'format'    => '<a href="' . $this->getUrl('*/*/download', array('time' => '$time', 'type' => '$type'))
+                . '">$extension</a> &nbsp; <small>('.$url7zip.')</small>',
             'index'     => 'type',
             'sortable'  => false,
             'filter'    => false
         ));
 
-        $this->addColumn('action', array(
-            'header'    => Mage::helper('backup')->__('Action'),
-            'type'      => 'action',
-            'width'     => '80px',
-            'filter'    => false,
-            'sortable'  => false,
-            'actions'   => array(array(
-                'url'       => $this->getUrl('*/*/delete', array('time' => '$time', 'type' => '$type')),
-                'caption'   => Mage::helper('adminhtml')->__('Delete'),
-                'confirm'   => Mage::helper('adminhtml')->__('Are you sure you want to do this?')
-            )),
-            'index'     => 'type',
-            'sortable'  => false
-        ));
+        if (Mage::helper('backup')->isRollbackAllowed()){
+            $this->addColumn('action', array(
+                    'header'   => Mage::helper('backup')->__('Action'),
+                    'type'     => 'action',
+                    'width'    => '80px',
+                    'filter'   => false,
+                    'sortable' => false,
+                    'actions'  => array(array(
+                        'url'     => '#',
+                        'caption' => Mage::helper('backup')->__('Rollback'),
+                        'onclick' => 'return backup.rollback(\'$type\', \'$time\');'
+                    )),
+                    'index'    => 'type',
+                    'sortable' => false
+            ));
+        }
 
         return $this;
     }
Index: app/code/core/Mage/Adminhtml/controllers/System/BackupController.php
===================================================================
--- app/code/core/Mage/Adminhtml/controllers/System/BackupController.php	(revision 142292)
+++ app/code/core/Mage/Adminhtml/controllers/System/BackupController.php	(working copy)
@@ -20,7 +20,7 @@
  *
  * @category    Mage
  * @package     Mage_Adminhtml
- * @copyright   Copyright (c) 2011 Magento Inc. (http://www.magentocommerce.com)
+ * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
  * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
  */
 
@@ -66,43 +66,105 @@
 
     /**
      * Create backup action
+     *
+     * @return Mage_Adminhtml_Controller_Action
      */
     public function createAction()
     {
+        if (!$this->getRequest()->isAjax()) {
+            return $this->getUrl('*/*/index');
+        }
+
+        $response = new Varien_Object();
+
+        /**
+         * @var Mage_Backup_Helper_Data $helper
+         */
+        $helper = Mage::helper('backup');
+
         try {
-            $backupDb = Mage::getModel('backup/db');
-            $backup   = Mage::getModel('backup/backup')
+            $type = $this->getRequest()->getParam('type');
+
+            if ($type == Mage_Backup_Helper_Data::TYPE_SYSTEM_SNAPSHOT
+                && $this->getRequest()->getParam('exclude_media')
+            ) {
+                $type = Mage_Backup_Helper_Data::TYPE_SNAPSHOT_WITHOUT_MEDIA;
+            }
+
+            $backupManager = Mage_Backup::getBackupInstance($type)
+                ->setBackupExtension($helper->getExtensionByType($type))
                 ->setTime(time())
-                ->setType('db')
-                ->setPath(Mage::getBaseDir("var") . DS . "backups");
+                ->setBackupsDir($helper->getBackupsDir());
 
-            Mage::register('backup_model', $backup);
+            $backupManager->setName($this->getRequest()->getParam('backup_name'));
 
-            $backupDb->createBackup($backup);
-            $this->_getSession()->addSuccess(Mage::helper('adminhtml')->__('The backup has been created.'));
+            Mage::register('backup_manager', $backupManager);
+
+            if ($this->getRequest()->getParam('maintenance_mode')) {
+                $turnedOn = $helper->turnOnMaintenanceMode();
+
+                if (!$turnedOn) {
+                    $response->setError(
+                        Mage::helper('backup')->__('You do not have sufficient permissions to enable Maintenance Mode during this operation.')
+                            . ' ' . Mage::helper('backup')->__('Please either unselect the "Put store on the maintenance mode" checkbox or update your permissions to proceed with the backup."')
+                    );
+                    $backupManager->setErrorMessage(Mage::helper('backup')->__("System couldn't put store on the maintenance mode"));
+                    return $this->getResponse()->setBody($response->toJson());
+                }
+            }
+
+            if ($type != Mage_Backup_Helper_Data::TYPE_DB) {
+                $backupManager->setRootDir(Mage::getBaseDir())
+                    ->addIgnorePaths($helper->getBackupIgnorePaths());
+            }
+
+            $successMessage = $helper->getCreateSuccessMessageByType($type);
+
+            $backupManager->create();
+
+            $this->_getSession()->addSuccess($successMessage);
+
+            $response->setRedirectUrl($this->getUrl('*/*/index'));
+        } catch (Mage_Backup_Exception_NotEnoughFreeSpace $e) {
+            $errorMessage = Mage::helper('backup')->__('Not enough free space to create backup.');
+        } catch (Mage_Backup_Exception_NotEnoughPermissions $e) {
+            Mage::log($e->getMessage());
+            $errorMessage = Mage::helper('backup')->__('Not enough permissions to create backup.');
+        } catch (Exception  $e) {
+            Mage::log($e->getMessage());
+            $errorMessage = Mage::helper('backup')->__('An error occurred while creating the backup.');
         }
-        catch (Exception  $e) {
-            $this->_getSession()->addException($e, Mage::helper('adminhtml')->__('An error occurred while creating the backup.'));
+
+        if (!empty($errorMessage)) {
+            $response->setError($errorMessage);
+            $backupManager->setErrorMessage($errorMessage);
         }
-        $this->_redirect('*/*');
+
+        if ($this->getRequest()->getParam('maintenance_mode')) {
+            $helper->turnOffMaintenanceMode();
+        }
+
+        $this->getResponse()->setBody($response->toJson());
     }
 
     /**
      * Download backup action
+     *
+     * @return Mage_Adminhtml_Controller_Action
      */
     public function downloadAction()
     {
-        $backup = Mage::getModel('backup/backup')
-            ->setTime((int)$this->getRequest()->getParam('time'))
-            ->setType($this->getRequest()->getParam('type'))
-            ->setPath(Mage::getBaseDir("var") . DS . "backups");
         /* @var $backup Mage_Backup_Model_Backup */
+        $backup = Mage::getModel('backup/backup')->loadByTimeAndType(
+            $this->getRequest()->getParam('time'),
+            $this->getRequest()->getParam('type')
+        );
 
-        if (!$backup->exists()) {
-            $this->_redirect('*/*');
+        if (!$backup->getTime() || !$backup->exists()) {
+            return $this->_redirect('*/*');
         }
 
-        $fileName = 'backup-' . date('YmdHis', $backup->getTime()) . '.sql.gz';
+        $fileName = Mage::helper('backup')->generateBackupDownloadName($backup);
 
         $this->_prepareDownloadResponse($fileName, null, 'application/octet-stream', $backup->getSize());
 
@@ -113,32 +175,190 @@
     }
 
     /**
-     * Delete backup action
+     * Rollback Action
+     *
+     * @return Mage_Adminhtml_Controller_Action
      */
-    public function deleteAction()
+    public function rollbackAction()
     {
+        if (!Mage::helper('backup')->isRollbackAllowed()){
+            return $this->_forward('denied');
+        }
+
+        if (!$this->getRequest()->isAjax()) {
+            return $this->getUrl('*/*/index');
+        }
+
+        $helper = Mage::helper('backup');
+        $response = new Varien_Object();
+
         try {
-            $backup = Mage::getModel('backup/backup')
-                ->setTime((int)$this->getRequest()->getParam('time'))
-                ->setType($this->getRequest()->getParam('type'))
-                ->setPath(Mage::getBaseDir("var") . DS . "backups")
-                ->deleteFile();
+            /* @var $backup Mage_Backup_Model_Backup */
+            $backup = Mage::getModel('backup/backup')->loadByTimeAndType(
+                $this->getRequest()->getParam('time'),
+                $this->getRequest()->getParam('type')
+            );
 
-            Mage::register('backup_model', $backup);
+            if (!$backup->getTime() || !$backup->exists()) {
+                return $this->_redirect('*/*');
+            }
 
-            $this->_getSession()->addSuccess(Mage::helper('adminhtml')->__('Backup record was deleted.'));
+            if (!$backup->getTime()) {
+                throw new Mage_Backup_Exception_CantLoadSnapshot();
+            }
+
+            $type = $backup->getType();
+
+            $backupManager = Mage_Backup::getBackupInstance($type)
+                ->setBackupExtension($helper->getExtensionByType($type))
+                ->setTime($backup->getTime())
+                ->setBackupsDir($helper->getBackupsDir())
+                ->setName($backup->getName(), false)
+                ->setResourceModel(Mage::getResourceModel('backup/db'));
+
+            Mage::register('backup_manager', $backupManager);
+
+            $passwordValid = Mage::getModel('backup/backup')->validateUserPassword(
+                $this->getRequest()->getParam('password')
+            );
+
+            if (!$passwordValid) {
+                $response->setError(Mage::helper('backup')->__('Invalid Password.'));
+                $backupManager->setErrorMessage(Mage::helper('backup')->__('Invalid Password.'));
+                return $this->getResponse()->setBody($response->toJson());
+            }
+
+            if ($this->getRequest()->getParam('maintenance_mode')) {
+                $turnedOn = $helper->turnOnMaintenanceMode();
+
+                if (!$turnedOn) {
+                    $response->setError(
+                        Mage::helper('backup')->__('You do not have sufficient permissions to enable Maintenance Mode during this operation.')
+                            . ' ' . Mage::helper('backup')->__('Please either unselect the "Put store on the maintenance mode" checkbox or update your permissions to proceed with the rollback."')
+                    );
+                    $backupManager->setErrorMessage(Mage::helper('backup')->__("System couldn't put store on the maintenance mode"));
+                    return $this->getResponse()->setBody($response->toJson());
+                }
+            }
+
+            if ($type != Mage_Backup_Helper_Data::TYPE_DB) {
+
+                $backupManager->setRootDir(Mage::getBaseDir())
+                    ->addIgnorePaths($helper->getRollbackIgnorePaths());
+
+                if ($this->getRequest()->getParam('use_ftp', false)) {
+                    $backupManager->setUseFtp(
+                        $this->getRequest()->getParam('ftp_host', ''),
+                        $this->getRequest()->getParam('ftp_user', ''),
+                        $this->getRequest()->getParam('ftp_pass', ''),
+                        $this->getRequest()->getParam('ftp_path', '')
+                    );
+                }
+            }
+
+            $backupManager->rollback();
+
+            $helper->invalidateCache()->invalidateIndexer();
+
+            $adminSession = $this->_getSession();
+            $adminSession->unsetAll();
+            $adminSession->getCookie()->delete($adminSession->getSessionName());
+
+            $response->setRedirectUrl($this->getUrl('*'));
+        } catch (Mage_Backup_Exception_CantLoadSnapshot $e) {
+            $errorMsg = Mage::helper('backup')->__('Backup file not found');
+        } catch (Mage_Backup_Exception_FtpConnectionFailed $e) {
+            $errorMsg = Mage::helper('backup')->__('Failed to connect to FTP');
+        } catch (Mage_Backup_Exception_FtpValidationFailed $e) {
+            $errorMsg = Mage::helper('backup')->__('Failed to validate FTP');
+        } catch (Mage_Backup_Exception_NotEnoughPermissions $e) {
+            Mage::log($e->getMessage());
+            $errorMsg = Mage::helper('backup')->__('Not enough permissions to perform rollback');
+        } catch (Exception $e) {
+            Mage::log($e->getMessage());
+            $errorMsg = Mage::helper('backup')->__('Failed to rollback');
         }
-        catch (Exception $e) {
-                // Nothing
+
+        if (!empty($errorMsg)) {
+            $response->setError($errorMsg);
+            $backupManager->setErrorMessage($errorMsg);
         }
 
-        $this->_redirect('*/*/');
+        if ($this->getRequest()->getParam('maintenance_mode')) {
+            $helper->turnOffMaintenanceMode();
+        }
 
+        $this->getResponse()->setBody($response->toJson());
     }
 
+    /**
+     * Delete backups mass action
+     *
+     * @return Mage_Adminhtml_Controller_Action
+     */
+    public function massDeleteAction()
+    {
+        $backupIds = $this->getRequest()->getParam('ids', array());
+
+        if (!is_array($backupIds) || !count($backupIds)) {
+            return $this->_redirect('*/*/index');
+        }
+
+        /** @var $backupModel Mage_Backup_Model_Backup */
+        $backupModel = Mage::getModel('backup/backup');
+        $resultData = new Varien_Object();
+        $resultData->setIsSuccess(false);
+        $resultData->setDeleteResult(array());
+        Mage::register('backup_manager', $resultData);
+
+        $deleteFailMessage = Mage::helper('backup')->__('Failed to delete one or several backups.');
+
+        try {
+            $allBackupsDeleted = true;
+
+            foreach ($backupIds as $id) {
+                list($time, $type) = explode('_', $id);
+                $backupModel
+                    ->loadByTimeAndType($time, $type)
+                    ->deleteFile();
+
+                if ($backupModel->exists()) {
+                    $allBackupsDeleted = false;
+                    $result = Mage::helper('adminhtml')->__('failed');
+                } else {
+                    $result = Mage::helper('adminhtml')->__('successful');
+                }
+
+                $resultData->setDeleteResult(
+                    array_merge($resultData->getDeleteResult(), array($backupModel->getFileName() . ' ' . $result))
+                );
+            }
+
+            $resultData->setIsSuccess(true);
+            if ($allBackupsDeleted) {
+                $this->_getSession()->addSuccess(
+                    Mage::helper('backup')->__('The selected backup(s) has been deleted.')
+                );
+            }
+            else {
+                throw new Exception($deleteFailMessage);
+            }
+        } catch (Exception $e) {
+            $resultData->setIsSuccess(false);
+            $this->_getSession()->addError($deleteFailMessage);
+        }
+
+        return $this->_redirect('*/*/index');
+    }
+
+    /**
+     * Check Permissions for all actions
+     *
+     * @return bool
+     */
     protected function _isAllowed()
     {
-        return Mage::getSingleton('admin/session')->isAllowed('system/tools/backup');
+        return Mage::getSingleton('admin/session')->isAllowed('system/tools/backup' );
     }
 
     /**
Index: app/code/core/Mage/Backup/Exception.php
===================================================================
--- app/code/core/Mage/Backup/Exception.php	(revision 142292)
+++ app/code/core/Mage/Backup/Exception.php	(working copy)
@@ -20,7 +20,7 @@
  *
  * @category    Mage
  * @package     Mage_Backup
- * @copyright   Copyright (c) 2011 Magento Inc. (http://www.magentocommerce.com)
+ * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
  * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
  */
 
Index: app/code/core/Mage/Backup/Helper/Data.php
===================================================================
--- app/code/core/Mage/Backup/Helper/Data.php	(revision 142292)
+++ app/code/core/Mage/Backup/Helper/Data.php	(working copy)
@@ -20,7 +20,7 @@
  *
  * @category    Mage
  * @package     Mage_Backup
- * @copyright   Copyright (c) 2011 Magento Inc. (http://www.magentocommerce.com)
+ * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
  * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
  */
 
@@ -29,5 +29,295 @@
  */
 class Mage_Backup_Helper_Data extends Mage_Core_Helper_Abstract
 {
+    /**
+     * Backup type constant for database backup
+     */
+    const TYPE_DB = 'db';
 
+    /**
+     * Backup type constant for filesystem backup
+     */
+    const TYPE_FILESYSTEM = 'filesystem';
+
+    /**
+     * Backup type constant for full system backup(database + filesystem)
+     */
+    const TYPE_SYSTEM_SNAPSHOT = 'snapshot';
+
+    /**
+     * Backup type constant for media and database backup
+     */
+    const TYPE_MEDIA = 'media';
+
+    /**
+     * Backup type constant for full system backup excluding media folder
+     */
+    const TYPE_SNAPSHOT_WITHOUT_MEDIA = 'nomedia';
+
+    /**
+     * Get all possible backup type values with descriptive title
+     *
+     * @return array
+     */
+    public function getBackupTypes()
+    {
+        return array(
+            self::TYPE_DB => $this->__('Database'),
+            self::TYPE_MEDIA => $this->__('Database and Media'),
+            self::TYPE_SYSTEM_SNAPSHOT => $this->__('System'),
+            self::TYPE_SNAPSHOT_WITHOUT_MEDIA => $this->__('System (excluding Media)')
+        );
+    }
+
+    /**
+     * Get all possible backup type values
+     *
+     * @return array
+     */
+    public function getBackupTypesList()
+    {
+        return array(
+            self::TYPE_DB,
+            self::TYPE_SYSTEM_SNAPSHOT,
+            self::TYPE_SNAPSHOT_WITHOUT_MEDIA,
+            self::TYPE_MEDIA
+        );
+    }
+
+    /**
+     * Get default backup type value
+     *
+     * @return string
+     */
+    public function getDefaultBackupType()
+    {
+        return self::TYPE_DB;
+    }
+
+    /**
+     * Get directory path where backups stored
+     *
+     * @return string
+     */
+    public function getBackupsDir()
+    {
+        return Mage::getBaseDir('var') . DS . 'backups';
+    }
+
+    /**
+     * Get backup file extension by backup type
+     *
+     * @param string $type
+     * @return string
+     */
+    public function getExtensionByType($type)
+    {
+        $extensions = $this->getExtensions();
+        return isset($extensions[$type]) ? $extensions[$type] : '';
+    }
+
+    /**
+     * Get all types to extensions map
+     *
+     * @return array
+     */
+    public function getExtensions()
+    {
+        return array(
+            self::TYPE_SYSTEM_SNAPSHOT => 'tgz',
+            self::TYPE_SNAPSHOT_WITHOUT_MEDIA => 'tgz',
+            self::TYPE_MEDIA => 'tgz',
+            self::TYPE_DB => 'gz'
+        );
+    }
+
+    /**
+     * Generate backup download name
+     *
+     * @param Mage_Backup_Model_Backup $backup
+     * @return string
+     */
+    public function generateBackupDownloadName(Mage_Backup_Model_Backup $backup)
+    {
+        $additionalExtension = $backup->getType() == self::TYPE_DB ? '.sql' : '';
+        return $backup->getType() . '-' . date('YmdHis', $backup->getTime()) . $additionalExtension . '.'
+            . $this->getExtensionByType($backup->getType());
+    }
+
+    /**
+     * Check Permission for Rollback
+     *
+     * @return boolean
+     */
+    public function isRollbackAllowed(){
+        return Mage::getSingleton('admin/session')->isAllowed('system/tools/backup/rollback' );
+    }
+
+    /**
+     * Get paths that should be ignored when creating system snapshots
+     *
+     * @return array
+     */
+    public function getBackupIgnorePaths()
+    {
+        return array(
+            '.svn',
+            'maintenance.flag',
+            Mage::getBaseDir('var') . DS . 'session',
+            Mage::getBaseDir('var') . DS . 'cache',
+            Mage::getBaseDir('var') . DS . 'full_page_cache',
+            Mage::getBaseDir('var') . DS . 'locks',
+            Mage::getBaseDir('var') . DS . 'log',
+            Mage::getBaseDir('var') . DS . 'report'
+        );
+    }
+
+    /**
+     * Get paths that should be ignored when rolling back system snapshots
+     *
+     * @return array
+     */
+    public function getRollbackIgnorePaths()
+    {
+        return array(
+            '.svn',
+            'maintenance.flag',
+            Mage::getBaseDir('var') . DS . 'session',
+            Mage::getBaseDir('var') . DS . 'locks',
+            Mage::getBaseDir('var') . DS . 'log',
+            Mage::getBaseDir('var') . DS . 'report',
+            Mage::getBaseDir('app') . DS . 'Mage.php',
+            Mage::getBaseDir() . DS . 'errors',
+            Mage::getBaseDir() . DS . 'index.php'
+        );
+    }
+
+    /**
+     * Put store into maintenance mode
+     *
+     * @return bool
+     */
+    public function turnOnMaintenanceMode()
+    {
+        $maintenanceFlagFile = $this->getMaintenanceFlagFilePath();
+        $result = file_put_contents($maintenanceFlagFile, 'maintenance');
+
+        return $result !== false;
+    }
+
+    /**
+     * Turn off store maintenance mode
+     */
+    public function turnOffMaintenanceMode()
+    {
+        $maintenanceFlagFile = $this->getMaintenanceFlagFilePath();
+        @unlink($maintenanceFlagFile);
+    }
+
+    /**
+     * Get backup create success message by backup type
+     *
+     * @param string $type
+     * @return string
+     */
+    public function getCreateSuccessMessageByType($type)
+    {
+        $messagesMap = array(
+            self::TYPE_SYSTEM_SNAPSHOT => $this->__('The system backup has been created.'),
+            self::TYPE_SNAPSHOT_WITHOUT_MEDIA => $this->__('The system (excluding Media) backup has been created.'),
+            self::TYPE_MEDIA => $this->__('The database and media backup has been created.'),
+            self::TYPE_DB => $this->__('The database backup has been created.')
+        );
+
+        if (!isset($messagesMap[$type])) {
+            return;
+        }
+
+        return $messagesMap[$type];
+    }
+
+    /**
+     * Get path to maintenance flag file
+     *
+     * @return string
+     */
+    protected function getMaintenanceFlagFilePath()
+    {
+        return Mage::getBaseDir() . DS . 'maintenance.flag';
+    }
+
+    /**
+     * Invalidate Cache
+     * @return Mage_Backup_Helper_Data
+     */
+    public function invalidateCache()
+    {
+        if ($cacheTypesNode = Mage::getConfig()->getNode(Mage_Core_Model_Cache::XML_PATH_TYPES)) {
+            $cacheTypesList = array_keys($cacheTypesNode->asArray());
+            Mage::app()->getCacheInstance()->invalidateType($cacheTypesList);
+        }
+        return $this;
+    }
+
+    /**
+     * Invalidate Indexer
+     *
+     * @return Mage_Backup_Helper_Data
+     */
+    public function invalidateIndexer()
+    {
+        foreach (Mage::getResourceModel('index/process_collection') as $process){
+            $process->changeStatus(Mage_Index_Model_Process::STATUS_REQUIRE_REINDEX);
+        }
+        return $this;
+    }
+
+    /**
+     * Creates backup's display name from it's name
+     *
+     * @param string $name
+     * @return string
+     */
+    public function nameToDisplayName($name)
+    {
+        return str_replace('_', ' ', $name);
+    }
+
+    /**
+     * Extracts information from backup's filename
+     *
+     * @param string $filename
+     * @return Varien_Object
+     */
+    public function extractDataFromFilename($filename)
+    {
+        $extensions = $this->getExtensions();
+
+        $filenameWithoutExtension = $filename;
+
+        foreach ($extensions as $extension) {
+            $filenameWithoutExtension = preg_replace('/' . preg_quote($extension, '/') . '$/', '',
+                $filenameWithoutExtension
+            );
+        }
+
+        $filenameWithoutExtension = substr($filenameWithoutExtension, 0, strrpos($filenameWithoutExtension, "."));
+
+        list($time, $type) = explode("_", $filenameWithoutExtension);
+
+        $name = str_replace($time . '_' . $type, '', $filenameWithoutExtension);
+
+        if (!empty($name)) {
+            $name = substr($name, 1);
+        }
+
+        $result = new Varien_Object();
+        $result->addData(array(
+            'name' => $name,
+            'type' => $type,
+            'time' => $time
+        ));
+
+        return $result;
+    }
 }
Index: app/code/core/Mage/Backup/Model/Backup.php
===================================================================
--- app/code/core/Mage/Backup/Model/Backup.php	(revision 142292)
+++ app/code/core/Mage/Backup/Model/Backup.php	(working copy)
@@ -20,7 +20,7 @@
  *
  * @category    Mage
  * @package     Mage_Backup
- * @copyright   Copyright (c) 2011 Magento Inc. (http://www.magentocommerce.com)
+ * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
  * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
  */
 
@@ -29,23 +29,17 @@
  *
  * @category   Mage
  * @package    Mage_Backup
- * @author      Magento Core Team <core@magentocommerce.com>
+ * @author     Magento Core Team <core@magentocommerce.com>
  */
 class Mage_Backup_Model_Backup extends Varien_Object
 {
-    /* backup types */
-    const BACKUP_DB     = 'db';
-    const BACKUP_VIEW   = 'view';
-    const BACKUP_MEDIA  = 'media';
-
     /* internal constants */
-    const BACKUP_EXTENSION  = 'gz';
     const COMPRESS_RATE     = 9;
 
     /**
      * Type of backup file
      *
-     * @var string db|media|view
+     * @var string
      */
     private $_type  = 'db';
 
@@ -65,14 +59,19 @@
      */
     public function load($fileName, $filePath)
     {
-        list ($time, $type) = explode("_", substr($fileName, 0, strrpos($fileName, ".")));
+        $backupData = Mage::helper('backup')->extractDataFromFilename($fileName);
+
         $this->addData(array(
             'id'   => $filePath . DS . $fileName,
-            'time' => (int)$time,
+            'time' => (int)$backupData->getTime(),
             'path' => $filePath,
-            'date_object' => new Zend_Date((int)$time)
+            'extension' => Mage::helper('backup')->getExtensionByType($backupData->getType()),
+            'display_name' => Mage::helper('backup')->nameToDisplayName($backupData->getName()),
+            'name' => $backupData->getName(),
+            'date_object' => new Zend_Date((int)$backupData->getTime(), Mage::app()->getLocale()->getLocaleCode())
         ));
-        $this->setType($type);
+
+        $this->setType($backupData->getType());
         return $this;
     }
 
@@ -93,19 +92,29 @@
      */
     public function getFileName()
     {
-        return $this->getTime() . "_" . $this->getType()
-               . "." . self::BACKUP_EXTENSION;
+        $filename = $this->getTime() . "_" . $this->getType();
+        $backupName = $this->getName();
+
+        if (!empty($backupName)) {
+            $filename .= '_' . $backupName;
+        }
+
+        $filename .= '.' . Mage::helper('backup')->getExtensionByType($this->getType());
+
+        return $filename;
     }
 
     /**
      * Sets type of file
      *
-     * @param string $value db|media|view
+     * @param string $value
+     * @return Mage_Backup_Model_Backup
      */
     public function setType($value='db')
     {
-        if(!in_array($value, array('db','media','view'))) {
-            $value = 'db';
+        $possibleTypes = Mage::helper('backup')->getBackupTypesList();
+        if(!in_array($value, $possibleTypes)) {
+            $value = Mage::helper('backup')->getDefaultBackupType();
         }
 
         $this->_type = $value;
@@ -117,7 +126,7 @@
     /**
      * Returns type of backup file
      *
-     * @return string db|media|view
+     * @return string
      */
     public function getType()
     {
@@ -205,6 +214,7 @@
      * Delete backup file
      *
      * @throws Mage_Backup_Exception
+     * @return Mage_Backup_Model_Backup
      */
     public function deleteFile()
     {
@@ -249,12 +259,13 @@
 
         $mode = $write ? 'wb' . self::COMPRESS_RATE : 'rb';
 
-        try {
-            $this->_handler = gzopen($filePath, $mode);
+        $this->_handler = @gzopen($filePath, $mode);
+
+        if (!$this->_handler) {
+            throw new Mage_Backup_Exception_NotEnoughPermissions(
+                Mage::helper('backup')->__('Backup file "%s" cannot be read from or written to.', $this->getFileName())
+            );
         }
-        catch (Exception $e) {
-            Mage::exception('Mage_Backup', Mage::helper('backup')->__('Backup file "%s" cannot be read from or written to.', $this->getFileName()));
-        }
 
         return $this;
     }
@@ -351,4 +362,41 @@
 
         return 0;
     }
+
+    /**
+     * Validate user password
+     *
+     * @param string $password
+     * @return bool
+     */
+    public function validateUserPassword($password)
+    {
+        $userPasswordHash = Mage::getModel('admin/session')->getUser()->getPassword();
+        return Mage::helper('core')->validateHash($password, $userPasswordHash);
+    }
+
+    /**
+     * Load backup by it's type and creation timestamp
+     *
+     * @param int $timestamp
+     * @param string $type
+     * @return Mage_Backup_Model_Backup
+     */
+    public function loadByTimeAndType($timestamp, $type)
+    {
+        $backupsCollection = Mage::getSingleton('backup/fs_collection');
+        $backupId = $timestamp . '_' . $type;
+
+        foreach ($backupsCollection as $backup) {
+            if ($backup->getId() == $backupId) {
+                $this->setType($backup->getType())
+                    ->setTime($backup->getTime())
+                    ->setName($backup->getName())
+                    ->setPath($backup->getPath());
+                break;
+            }
+        }
+
+        return $this;
+    }
 }
Index: app/code/core/Mage/Backup/Model/Db.php
===================================================================
--- app/code/core/Mage/Backup/Model/Db.php	(revision 142292)
+++ app/code/core/Mage/Backup/Model/Db.php	(working copy)
@@ -20,7 +20,7 @@
  *
  * @category    Mage
  * @package     Mage_Backup
- * @copyright   Copyright (c) 2011 Magento Inc. (http://www.magentocommerce.com)
+ * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
  * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
  */
 
@@ -37,12 +37,21 @@
 
     /**
      * Buffer length for multi rows
-     * default 512 Kb
+     * default 100 Kb
      *
      */
-    const BUFFER_LENGTH = 524288;
+    const BUFFER_LENGTH = 102400;
 
     /**
+     * List of tables which data should not be backed up
+     *
+     * @var array
+     */
+    protected $_ignoreDataTablesList = array(
+        'importexport/importdata'
+    );
+
+    /**
      * Retrieve resource model
      *
      * @return Mage_Backup_Model_Mysql4_Db
@@ -108,13 +117,16 @@
 
         $backup->write($this->getResource()->getHeader());
 
+        $ignoreDataTablesList = $this->getIgnoreDataTablesList();
+
         foreach ($tables as $table) {
-            $backup->write($this->getResource()->getTableHeader($table) . $this->getResource()->getTableDropSql($table) . "\n");
+            $backup->write($this->getResource()->getTableHeader($table)
+                . $this->getResource()->getTableDropSql($table) . "\n");
             $backup->write($this->getResource()->getTableCreateSql($table, false) . "\n");
 
             $tableStatus = $this->getResource()->getTableStatus($table);
 
-            if ($tableStatus->getRows()) {
+            if ($tableStatus->getRows() && !in_array($table, $ignoreDataTablesList)) {
                 $backup->write($this->getResource()->getTableDataBeforeSql($table));
 
                 if ($tableStatus->getDataLength() > self::BUFFER_LENGTH) {
@@ -149,4 +161,20 @@
         return $this;
     }
 
+    /**.
+     * Returns the list of tables which data should not be backed up
+     *
+     * @return array
+     */
+    public function getIgnoreDataTablesList()
+    {
+        $result = array();
+        $resource = Mage::getSingleton('core/resource');
+
+        foreach ($this->_ignoreDataTablesList as $table) {
+            $result[] = $resource->getTableName($table);
+        }
+
+        return $result;
+    }
 }
Index: app/code/core/Mage/Backup/Model/Observer.php
===================================================================
--- app/code/core/Mage/Backup/Model/Observer.php	(revision 0)
+++ app/code/core/Mage/Backup/Model/Observer.php	(revision 0)
@@ -0,0 +1,95 @@
+<?php
+/**
+ * Magento
+ *
+ * NOTICE OF LICENSE
+ *
+ * This source file is subject to the Open Software License (OSL 3.0)
+ * that is bundled with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://opensource.org/licenses/osl-3.0.php
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@magentocommerce.com so we can send you a copy immediately.
+ *
+ * DISCLAIMER
+ *
+ * Do not edit or add to this file if you wish to upgrade Magento to newer
+ * versions in the future. If you wish to customize Magento for your
+ * needs please refer to http://www.magentocommerce.com for more information.
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
+ * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
+ */
+
+
+/**
+ * Backup Observer
+ *
+ * @category   Mage
+ * @package    Mage_Backup
+ * @author     Magento Core Team <core@magentocommerce.com>
+ */
+class Mage_Backup_Model_Observer
+{
+    const XML_PATH_BACKUP_ENABLED          = 'system/backup/enabled';
+    const XML_PATH_BACKUP_TYPE             = 'system/backup/type';
+    const XML_PATH_BACKUP_MAINTENANCE_MODE = 'system/backup/maintenance';
+
+    /**
+     * Error messages
+     *
+     * @var array
+     */
+    protected $_errors = array();
+
+    /**
+     * Create Backup
+     *
+     * @return Mage_Log_Model_Cron
+     */
+    public function scheduledBackup()
+    {
+        if (!Mage::getStoreConfigFlag(self::XML_PATH_BACKUP_ENABLED)) {
+            return $this;
+        }
+
+        if (Mage::getStoreConfigFlag(self::XML_PATH_BACKUP_MAINTENANCE_MODE)) {
+            Mage::helper('backup')->turnOnMaintenanceMode();
+        }
+
+        $type = Mage::getStoreConfig(self::XML_PATH_BACKUP_TYPE);
+
+        $this->_errors = array();
+        try {
+            $backupManager = Mage_Backup::getBackupInstance($type)
+                ->setBackupExtension(Mage::helper('backup')->getExtensionByType($type))
+                ->setTime(time())
+                ->setBackupsDir(Mage::helper('backup')->getBackupsDir());
+
+            Mage::register('backup_manager', $backupManager);
+
+            if ($type != Mage_Backup_Helper_Data::TYPE_DB) {
+                $backupManager->setRootDir(Mage::getBaseDir())
+                    ->addIgnorePaths(Mage::helper('backup')->getBackupIgnorePaths());
+            }
+
+            $backupManager->create();
+            Mage::log(Mage::helper('backup')->getCreateSuccessMessageByType($type));
+        }
+        catch (Exception $e) {
+            $this->_errors[] = $e->getMessage();
+            $this->_errors[] = $e->getTrace();
+            Mage::log($e->getMessage(), Zend_Log::ERR);
+            Mage::logException($e);
+        }
+
+        if (Mage::getStoreConfigFlag(self::XML_PATH_BACKUP_MAINTENANCE_MODE)) {
+            Mage::helper('backup')->turnOffMaintenanceMode();
+        }
+
+        return $this;
+    }
+}
Index: app/code/core/Mage/Backup/Model/Fs/Collection.php
===================================================================
--- app/code/core/Mage/Backup/Model/Fs/Collection.php	(revision 142292)
+++ app/code/core/Mage/Backup/Model/Fs/Collection.php	(working copy)
@@ -20,7 +20,7 @@
  *
  * @category    Mage
  * @package     Mage_Backup
- * @copyright   Copyright (c) 2011 Magento Inc. (http://www.magentocommerce.com)
+ * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
  * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
  */
 
@@ -58,10 +58,17 @@
         }
 
         // set collection specific params
+        $extensions = Mage::helper('backup')->getExtensions();
+
+        foreach ($extensions as $key => $value) {
+            $extensions[] = '(' . preg_quote($value, '/') . ')';
+        }
+        $extensions = implode('|', $extensions);
+
         $this
             ->setOrder('time', self::SORT_ORDER_DESC)
             ->addTargetDir($this->_baseDir)
-            ->setFilesFilter('/^[a-z0-9\-\_]+\.' . preg_quote(Mage_Backup_Model_Backup::BACKUP_EXTENSION, '/') . '$/')
+            ->setFilesFilter('/^[a-z0-9\-\_]+\.' . $extensions . '$/')
             ->setCollectRecursively(false)
         ;
     }
@@ -80,6 +87,7 @@
             $row[$key] = $value;
         }
         $row['size'] = filesize($filename);
+        $row['id'] = $row['time'] . '_' . $row['type'];
         return $row;
     }
 }
Index: app/code/core/Mage/Backup/Model/Mysql4/Db.php
===================================================================
--- app/code/core/Mage/Backup/Model/Mysql4/Db.php	(revision 142292)
+++ app/code/core/Mage/Backup/Model/Mysql4/Db.php	(working copy)
@@ -20,7 +20,7 @@
  *
  * @category    Mage
  * @package     Mage_Backup
- * @copyright   Copyright (c) 2011 Magento Inc. (http://www.magentocommerce.com)
+ * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
  * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
  */
 
Index: app/code/core/Mage/Backup/Model/Resource/Db.php
===================================================================
--- app/code/core/Mage/Backup/Model/Resource/Db.php	(revision 142292)
+++ app/code/core/Mage/Backup/Model/Resource/Db.php	(working copy)
@@ -20,7 +20,7 @@
  *
  * @category    Mage
  * @package     Mage_Backup
- * @copyright   Copyright (c) 2011 Magento Inc. (http://www.magentocommerce.com)
+ * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
  * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
  */
 
@@ -35,11 +35,11 @@
 class Mage_Backup_Model_Resource_Db
 {
     /**
-     * Read connection
+     * Database connection adapter
      *
      * @var Varien_Db_Adapter_Pdo_Mysql
      */
-    protected $_read;
+    protected $_write;
 
     /**
      * tables Foreign key data array
@@ -55,7 +55,7 @@
      */
     public function __construct()
     {
-        $this->_read = Mage::getSingleton('core/resource')->getConnection('backup_read');
+        $this->_write = Mage::getSingleton('core/resource')->getConnection('backup_write');
     }
 
     /**
@@ -85,7 +85,7 @@
      */
     public function getTables()
     {
-        return $this->_read->listTables();
+        return $this->_write->listTables();
     }
 
     /**
@@ -123,7 +123,10 @@
         if (!$tableName) {
             $tables = $this->getTables();
             foreach($tables as $table) {
-                $fkScript = $fkScript . Mage::getResourceHelper('backup')->getTableForeignKeysSql($table);
+                $tableFkScript = Mage::getResourceHelper('backup')->getTableForeignKeysSql($table);
+                if (!empty($tableFkScript)) {
+                    $fkScript .= "\n" . $tableFkScript;
+                }
             }
         } else {
             $fkScript = $this->getTableForeignKeysSql($tableName);
@@ -139,7 +142,7 @@
      */
     public function getTableStatus($tableName)
     {
-        $row = $this->_read->showTableStatus($tableName);
+        $row = $this->_write->showTableStatus($tableName);
 
         if ($row) {
             $statusObject = new Varien_Object();
@@ -148,8 +151,8 @@
                 $statusObject->setData(strtolower($field), $value);
             }
 
-            $cntRow = $this->_read->fetchRow(
-                    $this->_read->select()->from($tableName, 'COUNT(1) as rows'));
+            $cntRow = $this->_write->fetchRow(
+                    $this->_write->select()->from($tableName, 'COUNT(1) as rows'));
             $statusObject->setRows($cntRow['rows']);
 
             return $statusObject;
@@ -161,7 +164,7 @@
     /**
      * Quote Table Row
      *
-     * @deprecated 
+     * @deprecated
      *
      * @param string $tableName
      * @param array $row
@@ -169,7 +172,7 @@
      */
     protected function _quoteRow($tableName, array $row)
     {
-        return $row;    
+        return $row;
     }
 
     /**
@@ -182,8 +185,7 @@
      */
     public function getTableDataSql($tableName, $count = null, $offset = null)
     {
-        return Mage::getResourceHelper('backup')->getInsertSql($tableName);
-
+        return Mage::getResourceHelper('backup')->getPartInsertSql($tableName, $count, $offset);
     }
 
     /**
@@ -206,7 +208,7 @@
      */
     public function getTableHeader($tableName)
     {
-        $quotedTableName = $this->_read->quoteIdentifier($tableName);
+        $quotedTableName = $this->_write->quoteIdentifier($tableName);
         return "\n--\n"
             . "-- Table structure for table {$quotedTableName}\n"
             . "--\n\n";
@@ -241,7 +243,7 @@
      */
     public function getFooter()
     {
-        return Mage::getResourceHelper('backup')->getFooter();        
+        return Mage::getResourceHelper('backup')->getFooter();
     }
 
     /**
@@ -274,7 +276,7 @@
     public function beginTransaction()
     {
         Mage::getResourceHelper('backup')->turnOnSerializableMode();
-        $this->_read->beginTransaction();
+        $this->_write->beginTransaction();
         return $this;
     }
 
@@ -285,7 +287,7 @@
      */
     public function commitTransaction()
     {
-        $this->_read->commit();
+        $this->_write->commit();
         Mage::getResourceHelper('backup')->turnOnReadCommittedMode();
         return $this;
     }
@@ -297,7 +299,18 @@
      */
     public function rollBackTransaction()
     {
-        $this->_read->rollBack();
+        $this->_write->rollBack();
         return $this;
     }
+
+    /**
+     * Run sql code
+     *
+     * @param $command
+     * @return Mage_Backup_Model_Resource_Db
+     */
+    public function runCommand($command){
+        $this->_write->query($command);
+        return $this;
+    }
 }
Index: app/code/core/Mage/Backup/Model/Resource/Helper/Mysql4.php
===================================================================
--- app/code/core/Mage/Backup/Model/Resource/Helper/Mysql4.php	(revision 142292)
+++ app/code/core/Mage/Backup/Model/Resource/Helper/Mysql4.php	(working copy)
@@ -20,7 +20,7 @@
  *
  * @category    Mage
  * @package     Mage_Backup
- * @copyright   Copyright (c) 2011 Magento Inc. (http://www.magentocommerce.com)
+ * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
  * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
  */
 
@@ -54,19 +54,40 @@
      */
     public function getTableForeignKeysSql($tableName = null)
     {
+        $sql = false;
+
         if ($tableName === null) {
             $sql = '';
             foreach ($this->_foreignKeys as $table => $foreignKeys) {
-                $sql .= sprintf("ALTER TABLE %s\n  %s;\n",
-                    $this->_getReadAdapter()->quoteIdentifier($table),
-                    join(",\n  ", $foreignKeys)
-                );
+                $sql .= $this->_buildForeignKeysAlterTableSql($table, $foreignKeys);
             }
-            return $sql;
+        } else if (isset($this->_foreignKeys[$tableName])) {
+            $foreignKeys = $this->_foreignKeys[$tableName];
+            $sql = $this->_buildForeignKeysAlterTableSql($tableName, $foreignKeys);
         }
 
-        return false;
+        return $sql;
     }
+
+    /**
+     * Build sql that will add foreign keys to it
+     *
+     * @param string $tableName
+     * @param array $foreignKeys
+     * @return string
+     */
+    protected function _buildForeignKeysAlterTableSql($tableName, $foreignKeys)
+    {
+        if (!is_array($foreignKeys) || empty($foreignKeys)) {
+            return '';
+        }
+
+        return sprintf("ALTER TABLE %s\n  %s;\n",
+            $this->_getReadAdapter()->quoteIdentifier($tableName),
+            join(",\n  ", $foreignKeys)
+        );
+    }
+
      /**
      * Get create script for table
      *
@@ -217,14 +238,17 @@
      * Return table part data SQL insert
      *
      * @param string $tableName
+     * @param int $count
+     * @param int $offset
      * @return string
      */
-    public function getInsertSql($tableName)
+    public function getPartInsertSql($tableName, $count = null, $offset = null)
     {
         $sql = null;
         $adapter = $this->_getWriteAdapter();
         $select = $adapter->select()
-            ->from($tableName);
+            ->from($tableName)
+            ->limit($count, $offset);
         $query  = $adapter->query($select);
 
         while ($row = $query->fetch()) {
@@ -243,8 +267,17 @@
 
         return $sql;
     }
-
     /**
+     * Return table data SQL insert
+     *
+     * @param string $tableName
+     * @return string
+     */
+    public function getInsertSql($tableName)
+    {
+        return $this->getPartInsertSql($tableName);
+    }
+    /**
      * Quote Table Row
      *
      * @param string $tableName
Index: app/code/core/Mage/Backup/etc/adminhtml.xml
===================================================================
--- app/code/core/Mage/Backup/etc/adminhtml.xml	(revision 142292)
+++ app/code/core/Mage/Backup/etc/adminhtml.xml	(working copy)
@@ -21,7 +21,7 @@
  *
  * @category    Mage
  * @package     Mage_Backup
- * @copyright   Copyright (c) 2011 Magento Inc. (http://www.magentocommerce.com)
+ * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
  * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
  */
 -->
@@ -50,6 +50,11 @@
                                 <children>
                                     <backup translate="title" module="backup">
                                         <title>Backups</title>
+                                            <children>
+                                                <rollback translate="title" module="backup">
+                                                    <title>Rollback</title>
+                                                </rollback>
+                                            </children>
                                     </backup>
                                 </children>
                             </tools>
Index: app/code/core/Mage/Backup/etc/config.xml
===================================================================
--- app/code/core/Mage/Backup/etc/config.xml	(revision 142292)
+++ app/code/core/Mage/Backup/etc/config.xml	(working copy)
@@ -21,7 +21,7 @@
  *
  * @category    Mage
  * @package     Mage_Backup
- * @copyright   Copyright (c) 2011 Magento Inc. (http://www.magentocommerce.com)
+ * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
  * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
  */
 -->
@@ -61,4 +61,13 @@
             </modules>
         </translate>
     </adminhtml>
+    <crontab>
+        <jobs>
+            <system_backup>
+                <run>
+                    <model>backup/observer::scheduledBackup</model>
+                </run>
+            </system_backup>
+        </jobs>
+    </crontab>
 </config>
Index: app/code/core/Mage/Backup/etc/system.xml
===================================================================
--- app/code/core/Mage/Backup/etc/system.xml	(revision 0)
+++ app/code/core/Mage/Backup/etc/system.xml	(revision 0)
@@ -0,0 +1,95 @@
+<?xml version="1.0"?>
+<!--
+/**
+ * Magento
+ *
+ * NOTICE OF LICENSE
+ *
+ * This source file is subject to the Academic Free License (AFL 3.0)
+ * that is bundled with this package in the file LICENSE_AFL.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://opensource.org/licenses/afl-3.0.php
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@magentocommerce.com so we can send you a copy immediately.
+ *
+ * DISCLAIMER
+ *
+ * Do not edit or add to this file if you wish to upgrade Magento to newer
+ * versions in the future. If you wish to customize Magento for your
+ * needs please refer to http://www.magentocommerce.com for more information.
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
+ * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
+ */
+-->
+<config>
+    <sections>
+        <system>
+            <groups>
+                <backup translate="label" module="backup">
+                    <label>Scheduled Backup Settings</label>
+                    <frontend_type>text</frontend_type>
+                    <sort_order>500</sort_order>
+                    <show_in_default>1</show_in_default>
+                    <show_in_website>0</show_in_website>
+                    <show_in_store>0</show_in_store>
+                    <fields>
+                        <enabled translate="label">
+                            <label>Enable Scheduled Backup</label>
+                            <frontend_type>select</frontend_type>
+                            <source_model>adminhtml/system_config_source_yesno</source_model>
+                            <sort_order>10</sort_order>
+                            <show_in_default>1</show_in_default>
+                            <show_in_website>0</show_in_website>
+                            <show_in_store>0</show_in_store>
+                        </enabled>
+                        <type translate="label">
+                            <label>Backup Type</label>
+                            <frontend_type>select</frontend_type>
+                            <depends><enabled>1</enabled></depends>
+                            <source_model>backup/config_source_type</source_model>
+                            <sort_order>20</sort_order>
+                            <show_in_default>1</show_in_default>
+                            <show_in_website>0</show_in_website>
+                            <show_in_store>0</show_in_store>
+                        </type>
+                        <time translate="label">
+                            <label>Start Time</label>
+                            <frontend_type>time</frontend_type>
+                            <depends><enabled>1</enabled></depends>
+                            <sort_order>30</sort_order>
+                            <show_in_default>1</show_in_default>
+                            <show_in_website>0</show_in_website>
+                            <show_in_store>0</show_in_store>
+                        </time>
+                        <frequency translate="label">
+                            <label>Frequency</label>
+                            <frontend_type>select</frontend_type>
+                            <depends><enabled>1</enabled></depends>
+                            <source_model>adminhtml/system_config_source_cron_frequency</source_model>
+                            <backend_model>backup/config_backend_cron</backend_model>
+                            <sort_order>40</sort_order>
+                            <show_in_default>1</show_in_default>
+                            <show_in_website>0</show_in_website>
+                            <show_in_store>0</show_in_store>
+                        </frequency>
+                        <maintenance translate="label comment">
+                            <label>Maintenance Mode</label>
+                            <comment>Put store on the maintenance mode while backup's creation</comment>
+                            <frontend_type>select</frontend_type>
+                            <depends><enabled>1</enabled></depends>
+                            <source_model>adminhtml/system_config_source_yesno</source_model>
+                            <sort_order>50</sort_order>
+                            <show_in_default>1</show_in_default>
+                            <show_in_website>0</show_in_website>
+                            <show_in_store>0</show_in_store>
+                        </maintenance>
+                    </fields>
+                </backup>
+            </groups>
+        </system>
+    </sections>
+</config>
Index: app/design/adminhtml/default/default/template/backup/dialogs.phtml
===================================================================
--- app/design/adminhtml/default/default/template/backup/dialogs.phtml	(revision 0)
+++ app/design/adminhtml/default/default/template/backup/dialogs.phtml	(revision 0)
@@ -0,0 +1,164 @@
+<div class="backup-dialog" style="display: none;" id="rollback-warning">
+    <div class="entry-edit">
+        <div class="entry-edit-head">
+            <h4 class="head-edit-form fieldset-legend"><?php echo $this->__('Warning') ?></h4>
+        </div>
+        <div class="content">
+            <div><?php echo $this->__('Any data created since the backup was made will be lost including admin users, customers and orders.')?></div>
+            <div class="question"><?php echo $this->__('Are you sure you want to proceed?')?></div>
+        </div>
+        <div class="buttons-set">
+            <div class="f-right">
+                <button type="button" class="scalable " onclick="backup.requestPassword()"><span><?php echo $this->__('OK')?></span></button>
+                <button type="button" class="scalable " onclick="backup.hidePopups()"><span><?php echo $this->__('Cancel')?></span></button>
+            </div>
+        </div>
+    </div>
+</div>
+
+<div class="backup-dialog" style="display: none;" id="backup-warning">
+    <div class="entry-edit">
+        <div class="entry-edit-head">
+            <h4 class="head-edit-form fieldset-legend"><?php echo $this->__('Warning') ?></h4>
+        </div>
+        <div class="content">
+            <div class="backup-messages" style="display: none;"><ul class="messages"></ul></div>
+            <div><?php echo $this->__("The backup's creation process will take time.")?></div>
+            <div><?php echo $this->__('You will need to wait when the action ends.')?></div>
+            <div><?php echo $this->__('Do you really want to proceed?')?></div>
+        </div>
+        <div class="buttons-set">
+            <div class="f-right">
+                <button type="button" class="scalable " onclick="backup.requestBackupOptions()"><span><?php echo $this->__('OK')?></span></button>
+                <button type="button" class="scalable " onclick="backup.hidePopups()"><span><?php echo $this->__('Cancel')?></span></button>
+            </div>
+        </div>
+    </div>
+</div>
+
+<div class="backup-dialog" style="display: none;" id="backup-options">
+     <div class="entry-edit">
+         <div class="entry-edit-head">
+             <h4 class="head-edit-form fieldset-legend"><?php echo $this->__('Backup options') ?></h4>
+         </div>
+         <div class="content">
+             <div class="backup-messages" style="display: none;"><ul class="messages"></ul></div>
+             <div><?php echo $this->__('Please specify backup creation options')?></div>
+             <form action="" method="post" id="backup-form" onsubmit="return backup.submitBackup();">
+                 <table class="form-list question" cellspacing="0">
+                     <tr>
+                         <td style="padding-right: 8px;"><label for="backup_name" class="nobr"><?php echo $this->__('Backup Name')?></label></td>
+                         <td>
+                             <input type="text" name="backup_name" id="backup_name" class="validate-alphanum-with-spaces validate-length maximum-length-50" style="width: 343px" maxlength="50" />
+                             <p class="note"><span><?php echo $this->__('Please use only letters (a-z or A-Z), numbers (0-9) or spaces in this field.'); ?></span></p>
+                         </td>
+                     </tr>
+                     <tr>
+                         <td>&nbsp;</td>
+                         <td class="maintenance-checkbox-container">
+                             <input type="checkbox" name="maintenance_mode" value="1" id="backup_maintenance_mode"/>
+                             <label for="backup_maintenance_mode"><?php echo $this->__('Put store on the maintenance mode while backup creation')?></label>
+                         </td>
+                     </tr>
+                     <tr id="exclude-media-checkbox-container" style="display: none;">
+                         <td>&nbsp;</td>
+                         <td>
+                             <input type="checkbox" name="exclude_media" value="1" id="exclude_media"/>
+                             <label for="exclude_media"><?php echo $this->__('Exclude media folder from backup')?></label>
+                         </td>
+                     </tr>
+                 </table>
+             </form>
+         </div>
+         <div class="buttons-set">
+             <div class="f-right">
+                 <button type="button" class="scalable " onclick="backup.submitBackup()"><span><?php echo $this->__('OK')?></span></button>
+                 <button type="button" class="scalable " onclick="backup.hidePopups()"><span><?php echo $this->__('Cancel')?></span></button>
+             </div>
+         </div>
+     </div>
+ </div>
+
+<div class="backup-dialog" style="display: none;" id="rollback-request-password">
+    <div class="entry-edit">
+        <div class="entry-edit-head">
+            <h4 class="head-edit-form fieldset-legend"><?php echo $this->__('Please enter password') ?></h4>
+        </div>
+        <div class="content">
+            <div class="backup-messages" style="display: none;"><ul class="messages"></ul></div>
+            <div><?php echo $this->__('Please enter password to confirm rollback.')?></div>
+            <div><?php echo $this->__('This action cannot be undone.')?></div>
+            <div class="question"><?php echo $this->__('Are you sure you want to proceed?')?></div>
+            <form action="" method="post" id="rollback-form" onsubmit="return backup.submitRollback();">
+                <div class="password-box-container">
+                    <table class="form-list" cellspacing="0">
+                        <tr>
+                            <td style="padding-right: 8px;"><label for="password" class="nobr"><?php echo $this->__('User Password')?> <span class="required">*</span></label></td>
+                            <td><input type="password" name="password" id="password" class="required-entry"></td>
+                        </tr>
+                        <tr>
+                            <td>&nbsp;</td>
+                            <td class="maintenance-checkbox-container">
+                                <input type="checkbox" name="maintenance_mode" value="1" id="rollback_maintenance_mode"/>
+                                <label for="rollback_maintenance_mode"><?php echo $this->__('Put store on the maintenance mode while rollback processing')?></label>
+                            </td>
+                        </tr>
+                        <tr id="use-ftp-checkbox-row" style="display: none;">
+                            <td>&nbsp;</td>
+                            <td><input type="checkbox" name="use_ftp" value="1" id="use_ftp" onClick="backup.toggleFtpCredentialsForm();"/> <label for="use_ftp"><?php echo $this->__('Use FTP Connection')?></label></td>
+                        </tr>
+                    </table>
+                </div>
+                <div class="entry-edit" id="ftp-credentials-container" style="display: none;">
+                    <div class="entry-edit-head">
+                        <h4 class=""><?php echo $this->__('FTP credentials')?></h4>
+                    </div>
+                    <fieldset>
+                        <table class="form-list" cellspacing="0">
+                            <tr>
+                                <td class="label"><label for="ftp_host"><?php echo $this->__('FTP Host')?> <span class="required">*</span></label></td>
+                                <td class="value"><input type="text" name="ftp_host" id="ftp_host"></td>
+                            </tr>
+                            <tr>
+                                <td class="label"><label for="ftp_user"><?php echo $this->__('FTP Login')?> <span class="required">*</span></label></td>
+                                <td class="value"><input type="text" name="ftp_user" id="ftp_user"></td>
+                            </tr>
+                            <tr>
+                                <td class="label"><label for="ftp_pass"><?php echo $this->__('FTP Password')?> <span class="required">*</span></label></td>
+                                <td class="value"><input type="password" name="ftp_pass" id="ftp_pass"></td>
+                            </tr>
+                            <tr>
+                                <td class="label"><label for="ftp_path"><?php echo $this->__('Magento root directory')?></label></td>
+                                <td class="value"><input type="text" name="ftp_path" id="ftp_path"></td>
+                            </tr>
+                        </table>
+                    </fieldset>
+                </div>
+            </form>
+        </div>
+        <div class="buttons-set">
+            <div class="f-right">
+                <button type="button" class="scalable " onclick="backup.submitRollback()"><span><?php echo $this->__('OK')?></span></button>
+                <button type="button" class="scalable " onclick="backup.hidePopups()"><span><?php echo $this->__('Cancel')?></span></button>
+            </div>
+        </div>
+    </div>
+</div>
+
+<div id="popup-window-mask" style="display: none;"></div>
+
+<?php
+    $helper = Mage::helper('backup');
+    $rollbackUrl = $this->getUrl('*/*/rollback');
+    $backupUrl = $this->getUrl('*/*/create');
+?>
+
+<script type="text/javascript">
+//<![CDATA[
+    document.observe('dom:loaded', function () {
+        backup = new AdminBackup();
+        backup.rollbackUrl = '<?php echo $helper->jsQuoteEscape($rollbackUrl);?>';
+        backup.backupUrl = '<?php echo $helper->jsQuoteEscape($backupUrl);?>';
+    });
+//]]>
+</script>
Index: app/design/adminhtml/default/default/template/backup/left.phtml
===================================================================
--- app/design/adminhtml/default/default/template/backup/left.phtml	(revision 142292)
+++ app/design/adminhtml/default/default/template/backup/left.phtml	(working copy)
@@ -20,7 +20,7 @@
  *
  * @category    design
  * @package     default_default
- * @copyright   Copyright (c) 2011 Magento Inc. (http://www.magentocommerce.com)
+ * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
  * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
  */
 ?>
Index: app/design/adminhtml/default/default/template/backup/list.phtml
===================================================================
--- app/design/adminhtml/default/default/template/backup/list.phtml	(revision 142292)
+++ app/design/adminhtml/default/default/template/backup/list.phtml	(working copy)
@@ -20,7 +20,7 @@
  *
  * @category    design
  * @package     default_default
- * @copyright   Copyright (c) 2011 Magento Inc. (http://www.magentocommerce.com)
+ * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
  * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
  */
 ?>
@@ -28,8 +28,13 @@
 <table cellspacing="0">
     <tr>
         <td style="width:50%;"><h3 class="icon-head head-backups-control"><?php echo Mage::helper('backup')->__('Backups') ?></h3></td>
-        <td class="form-buttons"><?php echo $this->getCreateButtonHtml(); ?></td>
+        <td class="form-buttons">
+            <?php echo $this->getCreateSnapshotButtonHtml(); ?>
+            <?php echo $this->getCreateMediaBackupButtonHtml(); ?>
+            <?php echo $this->getCreateButtonHtml(); ?>
+        </td>
     </tr>
 </table>
 </div>
 <?php echo $this->getGridHtml() ?>
+<?php echo $this->getDialogsHtml() ?>
Index: js/mage/adminhtml/backup.js
===================================================================
--- js/mage/adminhtml/backup.js	(revision 0)
+++ js/mage/adminhtml/backup.js	(revision 0)
@@ -0,0 +1,192 @@
+/**
+ * Magento
+ *
+ * NOTICE OF LICENSE
+ *
+ * This source file is subject to the Academic Free License (AFL 3.0)
+ * that is bundled with this package in the file LICENSE_AFL.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://opensource.org/licenses/afl-3.0.php
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@magentocommerce.com so we can send you a copy immediately.
+ *
+ * DISCLAIMER
+ *
+ * Do not edit or add to this file if you wish to upgrade Magento to newer
+ * versions in the future. If you wish to customize Magento for your
+ * needs please refer to http://www.magentocommerce.com for more information.
+ *
+ * @category    Mage
+ * @package     Mage_Adminhtml
+ * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
+ * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
+ */
+var AdminBackup = new Class.create();
+AdminBackup.prototype = {
+    initialize : function(a, b){
+        this.reset();
+        this.rollbackUrl = this.backupUrl = '';
+        this.rollbackValidator = new Validation($('rollback-form'));
+        this.backupValidator = new Validation($('backup-form'));
+    },
+
+    reset: function() {
+        this.time = 0;
+        this.type = '';
+        $('use-ftp-checkbox-row').hide();
+        $('use_ftp').checked = false;
+        $('ftp-credentials-container').hide();
+        $$('#ftp-credentials-container input').each(function(item) {
+            item.removeClassName('required-entry');
+        });
+        $('backup_maintenance_mode').checked = false;
+        $('rollback_maintenance_mode').checked = false;
+        $('exclude_media').checked = false;
+        $('password').value = '';
+        $('backup_name').value = '';
+        $$('.validation-advice').invoke('remove');
+        $$('input').invoke('removeClassName', 'validation-failed');
+        $$('input').invoke('removeClassName', 'validation-passed');
+        $$('.backup-messages').invoke('hide');
+        $$('#ftp-credentials-container input').each(function(item) {
+            item.value = '';
+        });
+    },
+
+    backup: function(type) {
+        this.reset();
+        this.type = type;
+        this.showBackupWarning();
+        return false;
+    },
+
+    rollback: function(type, time) {
+        this.reset();
+        this.time = time;
+        this.type = type;
+        this.showRollbackWarning();
+        return false;
+    },
+
+    showBackupWarning: function() {
+        this.showPopup('backup-warning');
+    },
+
+    showRollbackWarning: function() {
+        this.showPopup('rollback-warning');
+    },
+
+    requestBackupOptions: function() {
+        this.hidePopups();
+        var action = this.type != 'snapshot' ? 'hide' : 'show';
+        $$('#exclude-media-checkbox-container').invoke(action);
+        this.showPopup('backup-options');
+    },
+
+    requestPassword: function() {
+        this.hidePopups();
+        this.type != 'db' ? $('use-ftp-checkbox-row').show() : $('use-ftp-checkbox-row').hide();
+        this.showPopup('rollback-request-password');
+    },
+
+    toggleFtpCredentialsForm: function() {
+        $('use_ftp').checked ? $('ftp-credentials-container').show()
+            : $('ftp-credentials-container').hide();
+        var divId = 'rollback-request-password';
+
+        $$('#ftp-credentials-container input').each(function(item) {
+            if (item.name == 'ftp_path') return;
+            $('use_ftp').checked ? item.addClassName('required-entry') : item.removeClassName('required-entry');
+        });
+
+        $(divId).show().setStyle({
+            'marginTop': -$(divId).getDimensions().height / 2 + 'px'
+        });
+    },
+
+    submitBackup: function () {
+        if (!!this.backupValidator && this.backupValidator.validate()) {
+            this.hidePopups();
+            var data = {
+                'type': this.type,
+                'maintenance_mode': $('backup_maintenance_mode').checked ? 1 : 0,
+                'backup_name': $('backup_name').value,
+                'exclude_media': $('exclude_media').checked ? 1 : 0
+            };
+
+            new Ajax.Request(this.backupUrl, {
+                onSuccess: function(transport) {
+                    this.processResponse(transport, 'backup-options');
+                }.bind(this),
+                method: 'post',
+                parameters: data
+            });
+        }
+        return false;
+    },
+
+    submitRollback: function() {
+        if (!!this.rollbackValidator && this.rollbackValidator.validate()) {
+            var data = this.getPostData();
+            this.hidePopups();
+            new Ajax.Request(this.rollbackUrl, {
+                onSuccess: function(transport) {
+                    this.processResponse(transport, 'rollback-request-password');
+                }.bind(this),
+                method: 'post',
+                parameters: data
+            });
+        }
+        return false;
+    },
+
+    processResponse: function(transport, popupId) {
+        if (!transport.responseText.isJSON()) {
+            return;
+        }
+
+        var json = transport.responseText.evalJSON();
+
+        if (!!json.error) {
+            this.displayError(popupId, json.error);
+            this.showPopup(popupId);
+            return;
+        }
+
+        if (!!json.redirect_url) {
+            setLocation(json.redirect_url);
+        }
+    },
+
+    displayError: function(parentContainer, message) {
+        var messageHtml = this.getErrorMessageHtml(message);
+        $$('#' + parentContainer + ' .backup-messages .messages').invoke('update', messageHtml);
+        $$('#' + parentContainer + ' .backup-messages').invoke('show');
+    },
+
+    getErrorMessageHtml: function(message) {
+        return '<li class="error-msg"><ul><li><span>' + message + '</span></li></ul></li>';
+    },
+
+    getPostData: function() {
+        var data = $('rollback-form').serialize(true);
+        data['time'] = this.time;
+        data['type'] = this.type;
+        return data;
+    },
+
+    showPopup: function(divId) {
+        $(divId).show().setStyle({
+            'marginTop': -$(divId).getDimensions().height / 2 + 'px'
+        });
+        $('popup-window-mask').setStyle({
+            height: $('html-body').getHeight() + 'px'
+        }).show();
+    },
+
+    hidePopups: function() {
+        $$('.backup-dialog').each(Element.hide);
+        $('popup-window-mask').hide();
+    }
+}
Index: lib/Mage/Archive.php
===================================================================
--- lib/Mage/Archive.php	(revision 142292)
+++ lib/Mage/Archive.php	(working copy)
@@ -20,7 +20,7 @@
  *
  * @category    Mage
  * @package     Mage_Archive
- * @copyright   Copyright (c) 2009 Irubin Consulting Inc. DBA Varien (http://www.varien.com)
+ * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
  * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
  */
 
@@ -84,7 +84,7 @@
         } else {
             $format = self::DEFAULT_ARCHIVER;
         }
-        $class = 'Mage_Archive_'.ucfirst($format);
+        $class = 'Mage_Archive_' . ucfirst($format);
         $this->_archiver = new $class();
         return $this->_archiver;
     }
@@ -157,12 +157,13 @@
             if ($i == 0) {
                 $packed = rtrim($destination, DS) . DS;
             } else {
-                $packed = rtrim($destination, DS) . DS . '~tmp-'. microtime(true) . $archivers[$i-1] . '.' . $archivers[$i-1];
+                $packed = rtrim($destination, DS) . DS . '~tmp-'. microtime(true) . $archivers[$i-1] . '.'
+                    . $archivers[$i-1];
             }
             $source = $this->_getArchiver($archivers[$i])->unpack($source, $packed);
-            
+
             //var_dump($packed, $source);
-            
+
             if ($clearInterm && $interimSource && $i >= 0) {
                 unlink($interimSource);
             }
@@ -218,5 +219,4 @@
         }
         return false;
     }
-
-}
\ No newline at end of file
+}
Index: lib/Mage/Backup.php
===================================================================
--- lib/Mage/Backup.php	(revision 0)
+++ lib/Mage/Backup.php	(revision 0)
@@ -0,0 +1,59 @@
+<?php
+/**
+ * Magento
+ *
+ * NOTICE OF LICENSE
+ *
+ * This source file is subject to the Open Software License (OSL 3.0)
+ * that is bundled with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://opensource.org/licenses/osl-3.0.php
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@magentocommerce.com so we can send you a copy immediately.
+ *
+ * DISCLAIMER
+ *
+ * Do not edit or add to this file if you wish to upgrade Magento to newer
+ * versions in the future. If you wish to customize Magento for your
+ * needs please refer to http://www.magentocommerce.com for more information.
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
+ * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
+ */
+
+/**
+ * Class to work with backups
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @author      Magento Core Team <core@magentocommerce.com>
+ */
+class Mage_Backup
+{
+    /**
+     * List of supported a backup types
+     *
+     * @var array
+     */
+    static protected $_allowedBackupTypes = array('db', 'snapshot', 'filesystem', 'media', 'nomedia');
+
+    /**
+     * get Backup Instance By File Name
+     *
+     * @param  string $type
+     * @return Mage_Backup_Interface
+     */
+    static public function getBackupInstance($type)
+    {
+        $class = 'Mage_Backup_' . ucfirst($type);
+
+        if (!in_array($type, self::$_allowedBackupTypes) || !class_exists($class, true)){
+            throw new Mage_Exception('Current implementation not supported this type (' . $type . ') of backup.');
+        }
+
+        return new $class();
+    }
+}
Index: lib/Mage/Archive/Abstract.php
===================================================================
--- lib/Mage/Archive/Abstract.php	(revision 142292)
+++ lib/Mage/Archive/Abstract.php	(working copy)
@@ -20,7 +20,7 @@
  *
  * @category    Mage
  * @package     Mage_Archive
- * @copyright   Copyright (c) 2009 Irubin Consulting Inc. DBA Varien (http://www.varien.com)
+ * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
  * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
  */
 
@@ -34,14 +34,16 @@
 class Mage_Archive_Abstract
 {
     /**
-     * Write data to file. If file can't be opened,
+     * Write data to file. If file can't be opened - throw exception
      *
      * @param string $destination
      * @param string $data
      * @return boolean
+     * @throws Mage_Exception
      */
     protected function _writeFile($destination, $data)
     {
+        $destination = trim($destination);
         if(false === file_put_contents($destination, $data)) {
             throw new Mage_Exception("Can't write to file: " . $destination);
         }
@@ -53,6 +55,7 @@
      *
      * @param string $source
      * @return string
+     * @throws Mage_Exception
      */
     protected function _readFile($source)
     {
@@ -70,7 +73,8 @@
      * Get file name from source (URI) without last extension.
      *
      * @param string $source
-     * @return string
+     * @param bool $withExtension
+     * @return mixed|string
      */
     public function getFilename($source, $withExtension=false)
     {
@@ -80,5 +84,4 @@
         }
         return $file;
     }
-
-}
\ No newline at end of file
+}
Index: lib/Mage/Archive/Bz.php
===================================================================
--- lib/Mage/Archive/Bz.php	(revision 142292)
+++ lib/Mage/Archive/Bz.php	(working copy)
@@ -20,7 +20,7 @@
  *
  * @category    Mage
  * @package     Mage_Archive
- * @copyright   Copyright (c) 2009 Irubin Consulting Inc. DBA Varien (http://www.varien.com)
+ * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
  * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
  */
 
@@ -43,9 +43,19 @@
     */
     public function pack($source, $destination)
     {
-        $data = $this->_readFile($source);
-        $bzData = bzcompress($data, 9);
-        $this->_writeFile($destination, $bzData);
+        $fileReader = new Mage_Archive_Helper_File($source);
+        $fileReader->open('r');
+
+        $archiveWriter = new Mage_Archive_Helper_File_Bz($destination);
+        $archiveWriter->open('w');
+
+        while (!$fileReader->eof()) {
+            $archiveWriter->write($fileReader->read());
+        }
+
+        $fileReader->close();
+        $archiveWriter->close();
+
         return $destination;
     }
 
@@ -58,22 +68,22 @@
     */
     public function unpack($source, $destination)
     {
-        $data = '';
-        $bzPointer = bzopen($source, 'r' );
-        if (empty($bzPointer)) {
-            throw new Exception('Can\'t open BZ archive : ' . $source);
-        }
-        while (!feof($bzPointer)) {
-            $data .= bzread($bzPointer, 131072);
-        }
-        bzclose($bzPointer);
         if (is_dir($destination)) {
             $file = $this->getFilename($source);
             $destination = $destination . $file;
         }
-        echo $destination;
-        $this->_writeFile($destination, $data);
+
+        $archiveReader = new Mage_Archive_Helper_File_Bz($source);
+        $archiveReader->open('r');
+
+        $fileWriter = new Mage_Archive_Helper_File($destination);
+        $fileWriter->open('w');
+
+        while (!$archiveReader->eof()) {
+            $fileWriter->write($archiveReader->read());
+        }
+
         return $destination;
     }
 
-}
\ No newline at end of file
+}
Index: lib/Mage/Archive/Gz.php
===================================================================
--- lib/Mage/Archive/Gz.php	(revision 142292)
+++ lib/Mage/Archive/Gz.php	(working copy)
@@ -20,7 +20,7 @@
  *
  * @category    Mage
  * @package     Mage_Archive
- * @copyright   Copyright (c) 2009 Irubin Consulting Inc. DBA Varien (http://www.varien.com)
+ * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
  * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
  */
 
@@ -42,9 +42,19 @@
     */
     public function pack($source, $destination)
     {
-        $data = $this->_readFile($source);
-        $gzData = gzencode($data, 9);
-        $this->_writeFile($destination, $gzData);
+        $fileReader = new Mage_Archive_Helper_File($source);
+        $fileReader->open('r');
+
+        $archiveWriter = new Mage_Archive_Helper_File_Gz($destination);
+        $archiveWriter->open('wb9');
+
+        while (!$fileReader->eof()) {
+            $archiveWriter->write($fileReader->read());
+        }
+
+        $fileReader->close();
+        $archiveWriter->close();
+
         return $destination;
     }
 
@@ -57,21 +67,21 @@
     */
     public function unpack($source, $destination)
     {
-        $gzPointer = gzopen($source, 'r' );
-        if (empty($gzPointer)) {
-            throw new Mage_Exception('Can\'t open GZ archive : ' . $source);
-        }
-        $data = '';
-        while (!gzeof($gzPointer)) {
-            $data .= gzread($gzPointer, 131072);
-        }
-        gzclose($gzPointer);
         if (is_dir($destination)) {
             $file = $this->getFilename($source);
             $destination = $destination . $file;
         }
-        $this->_writeFile($destination, $data);
+
+        $archiveReader = new Mage_Archive_Helper_File_Gz($source);
+        $archiveReader->open('r');
+
+        $fileWriter = new Mage_Archive_Helper_File($destination);
+        $fileWriter->open('w');
+
+        while (!$archiveReader->eof()) {
+            $fileWriter->write($archiveReader->read());
+        }
+
         return $destination;
     }
-
-}
\ No newline at end of file
+}
Index: lib/Mage/Archive/Interface.php
===================================================================
--- lib/Mage/Archive/Interface.php	(revision 142292)
+++ lib/Mage/Archive/Interface.php	(working copy)
@@ -20,7 +20,7 @@
  *
  * @category    Mage
  * @package     Mage_Archive
- * @copyright   Copyright (c) 2009 Irubin Consulting Inc. DBA Varien (http://www.varien.com)
+ * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
  * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
  */
 
@@ -50,4 +50,4 @@
     * @return string
     */
     public function unpack($source, $destination);
-}
\ No newline at end of file
+}
Index: lib/Mage/Archive/Tar.php
===================================================================
--- lib/Mage/Archive/Tar.php	(revision 142292)
+++ lib/Mage/Archive/Tar.php	(working copy)
@@ -20,7 +20,7 @@
  *
  * @category    Mage
  * @package     Mage_Archive
- * @copyright   Copyright (c) 2009 Irubin Consulting Inc. DBA Varien (http://www.varien.com)
+ * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
  * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
  */
 
@@ -34,9 +34,11 @@
 class Mage_Archive_Tar extends Mage_Archive_Abstract implements Mage_Archive_Interface
 {
     /**
-     * Constant is used for parse tar's header.
+     * Tar block size
+     *
+     * @const int
      */
-    const FORMAT_PARSE_HEADER = 'a100name/a8mode/a8uid/a8gid/a12size/a12mtime/a8checksum/a1type/a100symlink/a6magic/a2version/a32uname/a32gname/a8devmajor/a8devminor/a155prefix/a12closer';
+    const TAR_BLOCK_SIZE = 512;
 
     /**
      * Keep file or directory for packing.
@@ -61,6 +63,122 @@
     protected $_skipRoot;
 
     /**
+    * Tarball data writer
+    *
+    * @var Mage_Archive_Helper_File
+    */
+    protected $_writer;
+
+    /**
+    * Tarball data reader
+    *
+    * @var Mage_Archive_Helper_File
+    */
+    protected $_reader;
+
+    /**
+    * Path to file where tarball should be placed
+    *
+    * @var string
+    */
+    protected $_destinationFilePath;
+
+    /**
+     * Initialize tarball writer
+     *
+     * @return Mage_Archive_Tar
+     */
+    protected function _initWriter()
+    {
+        $this->_writer = new Mage_Archive_Helper_File($this->_destinationFilePath);
+        $this->_writer->open('w');
+
+        return $this;
+    }
+
+    /**
+     * Returns string that is used for tar's header parsing
+     *
+     * @return string
+     */
+    protected static final function _getFormatParseHeader()
+    {
+        return 'a100name/a8mode/a8uid/a8gid/a12size/a12mtime/a8checksum/a1type/a100symlink/a6magic/a2version/'
+            . 'a32uname/a32gname/a8devmajor/a8devminor/a155prefix/a12closer';
+    }
+
+    /**
+     * Destroy tarball writer
+     *
+     * @return Mage_Archive_Tar
+     */
+    protected function _destroyWriter()
+    {
+        if ($this->_writer instanceof Mage_Archive_Helper_File) {
+            $this->_writer->close();
+            $this->_writer = null;
+        }
+
+        return $this;
+    }
+
+    /**
+     * Get tarball writer
+     *
+     * @return Mage_Archive_Helper_File
+     */
+    protected function _getWriter()
+    {
+        if (!$this->_writer) {
+            $this->_initWriter();
+        }
+
+        return $this->_writer;
+    }
+
+    /**
+     * Initialize tarball reader
+     *
+     * @return Mage_Archive_Tar
+     */
+    protected function _initReader()
+    {
+        $this->_reader = new Mage_Archive_Helper_File($this->_getCurrentFile());
+        $this->_reader->open('r');
+
+        return $this;
+    }
+
+    /**
+     * Destroy tarball reader
+     *
+     * @return Mage_Archive_Tar
+     */
+    protected function _destroyReader()
+    {
+        if ($this->_reader instanceof Mage_Archive_Helper_File) {
+            $this->_reader->close();
+            $this->_reader = null;
+        }
+
+        return $this;
+    }
+
+    /**
+     * Get tarball reader
+     *
+     * @return Mage_Archive_Helper_File
+     */
+    protected function _getReader()
+    {
+        if (!$this->_reader) {
+            $this->_initReader();
+        }
+
+        return $this->_reader;
+    }
+
+    /**
      * Set option that define ability skip first catalog level.
      *
      * @param mixed $skipRoot
@@ -80,11 +198,23 @@
      */
     protected function _setCurrentFile($file)
     {
-        $this->_currentFile = $file .((is_dir($file) && substr($file, -1)!=DS)?DS:'');
+        $this->_currentFile = $file .((!is_link($file) && is_dir($file) && substr($file, -1) != DS) ? DS : '');
         return $this;
     }
 
     /**
+    * Set path to file where tarball should be placed
+    *
+    * @param string $destinationFilePath
+    * @return Mage_Archive_Tar
+    */
+    protected function _setDestinationFilePath($destinationFilePath)
+    {
+        $this->_destinationFilePath = $destinationFilePath;
+        return $this;
+    }
+
+    /**
      * Retrieve file which is packing.
      *
      * @return string
@@ -124,6 +254,7 @@
      * Walk through directory and add to tar file or directory.
      * Result is packed string on TAR format.
      *
+     * @deprecated after 1.7.0.0
      * @param boolean $skipRoot
      * @return string
      */
@@ -155,9 +286,73 @@
     }
 
     /**
+     * Recursively walk through file tree and create tarball
+     *
+     * @param boolean $skipRoot
+     * @param boolean $finalize
+     * @throws Mage_Exception
+     */
+    protected function _createTar($skipRoot = false, $finalize = false)
+    {
+        if (!$skipRoot) {
+            $this->_packAndWriteCurrentFile();
+        }
+
+        $file = $this->_getCurrentFile();
+
+        if (is_dir($file)) {
+            $dirFiles = scandir($file);
+
+            if (false === $dirFiles) {
+                throw new Mage_Exception('Can\'t scan dir: ' . $file);
+            }
+
+            array_shift($dirFiles); /* remove  './'*/
+            array_shift($dirFiles); /* remove  '../'*/
+
+            foreach ($dirFiles as $item) {
+                $this->_setCurrentFile($file . $item)->_createTar();
+            }
+        }
+
+        if ($finalize) {
+            $this->_getWriter()->write(str_repeat("\0", self::TAR_BLOCK_SIZE * 12));
+        }
+    }
+
+    /**
+     * Write current file to tarball
+     */
+    protected function _packAndWriteCurrentFile()
+    {
+        $archiveWriter = $this->_getWriter();
+        $archiveWriter->write($this->_composeHeader());
+
+        $currentFile = $this->_getCurrentFile();
+
+        $fileSize = 0;
+
+        if (is_file($currentFile) && !is_link($currentFile)) {
+            $fileReader = new Mage_Archive_Helper_File($currentFile);
+            $fileReader->open('r');
+
+            while (!$fileReader->eof()) {
+                $archiveWriter->write($fileReader->read());
+            }
+
+            $fileReader->close();
+
+            $fileSize = filesize($currentFile);
+        }
+
+        $appendZerosCount = (self::TAR_BLOCK_SIZE - $fileSize % self::TAR_BLOCK_SIZE) % self::TAR_BLOCK_SIZE;
+        $archiveWriter->write(str_repeat("\0", $appendZerosCount));
+    }
+
+    /**
      * Compose header for current file in TAR format.
      * If length of file's name greater 100 characters,
-     * method breaks header to two pieces. First conatins
+     * method breaks header into two pieces. First contains
      * header and data with long name. Second contain only header.
      *
      * @param boolean $long
@@ -178,14 +373,16 @@
         }
         $header = array();
         $header['100-name']       = $long?'././@LongLink':substr($nameFile, 0, 100);
-        $header['8-mode']         = $long?'       ':str_pad(substr(sprintf("%07o", $infoFile['mode']),-4), 6, '0', STR_PAD_LEFT);
+        $header['8-mode']         = $long ? '       '
+            : str_pad(substr(sprintf("%07o", $infoFile['mode']),-4), 6, '0', STR_PAD_LEFT);
         $header['8-uid']          = $long || $infoFile['uid']==0?"\0\0\0\0\0\0\0":sprintf("%07o", $infoFile['uid']);
         $header['8-gid']          = $long || $infoFile['gid']==0?"\0\0\0\0\0\0\0":sprintf("%07o", $infoFile['gid']);
-        $header['12-size']        = $long?sprintf("%011o", strlen($nameFile)):sprintf("%011o", is_dir($file) ? 0 : filesize($file));
+        $header['12-size']        = $long ? sprintf("%011o", strlen($nameFile)) : sprintf("%011o", is_dir($file)
+            ? 0 : filesize($file));
         $header['12-mtime']       = $long?'00000000000':sprintf("%011o", $infoFile['mtime']);
         $header['8-check']        = sprintf('% 8s', '');
-        $header['1-type']         = $long?'L':(is_link($file) ? 2 : is_dir ($file) ? 5 : 0);
-        $header['100-symlink']    = is_link($file) == 2 ? readlink($item) : '';
+        $header['1-type']         = $long ? 'L' : (is_link($file) ? 2 : (is_dir($file) ? 5 : 0));
+        $header['100-symlink']    = is_link($file) ? readlink($file) : '';
         $header['6-magic']        = 'ustar ';
         $header['2-version']      = ' ';
         $a=function_exists('posix_getpwuid')?posix_getpwuid (fileowner($file)):array('name'=>'');
@@ -219,38 +416,63 @@
      *
      * @param string $destination path to file is unpacked
      * @return array list of files
+     * @throws Mage_Exception
      */
     protected function _unpackCurrentTar($destination)
     {
-        $file = $this->_getCurrentFile();
-        $pointer = fopen($file, 'r');
-        if (empty($pointer)) {
-            throw new Mage_Exception('Can\'t open file: ' . $file);
-        }
+        $archiveReader = $this->_getReader();
         $list = array();
-        while (!feof($pointer)) {
-            $header = $this->_parseHeader($pointer);
-            if ($header) {
-                $currentFile = $destination . $header['name'];
-                if ($header['type']=='5' && @mkdir($currentFile, 0777, true)) {
-                    $list[] = $currentFile . DS;
-                } elseif (in_array($header['type'], array("0",chr(0), ''))) {
-                    $dirname = dirname($currentFile);
-                    if(!file_exists($dirname)) {
-                        @mkdir($dirname, 0777, true);
+
+        while (!$archiveReader->eof()) {
+            $header = $this->_extractFileHeader();
+
+            if (!$header) {
+                continue;
+            }
+
+            $currentFile = $destination . $header['name'];
+            $dirname = dirname($currentFile);
+
+            if (in_array($header['type'], array("0",chr(0), ''))) {
+
+                if(!file_exists($dirname)) {
+                    $mkdirResult = @mkdir($dirname, 0777, true);
+
+                    if (false === $mkdirResult) {
+                        throw new Mage_Exception('Failed to create directory ' . $dirname);
                     }
-                    $this->_writeFile($currentFile, $header['data']);
-                    $list[] = $currentFile;
                 }
+
+                $this->_extractAndWriteFile($header, $currentFile);
+                $list[] = $currentFile;
+
+            } elseif ($header['type'] == '5') {
+
+                if(!file_exists($dirname)) {
+                    $mkdirResult = @mkdir($currentFile, $header['mode'], true);
+
+                    if (false === $mkdirResult) {
+                        throw new Mage_Exception('Failed to create directory ' . $currentFile);
+                    }
+                }
+                $list[] = $currentFile . DS;
+            } elseif ($header['type'] == '2') {
+
+                $symlinkResult = @symlink($header['symlink'], $currentFile);
+
+                if (false === $symlinkResult) {
+                    throw new Mage_Exception('Failed to create symlink ' . $currentFile . ' to ' . $header['symlink']);
+                }
             }
         }
-        fclose($pointer);
+
         return $list;
     }
 
     /**
      * Get header from TAR string and unpacked it by format.
      *
+     * @deprecated after 1.7.0.0
      * @param resource $pointer
      * @return string
      */
@@ -262,10 +484,9 @@
             return false;
         }
 
-        $fmt = self::FORMAT_PARSE_HEADER;
+        $fmt = self::_getFormatParseHeader();
         $header = unpack ($fmt, $firstLine);
 
-
         $header['mode']=$header['mode']+0;
         $header['uid']=octdec($header['uid']);
         $header['gid']=octdec($header['gid']);
@@ -284,7 +505,7 @@
         }
 
         $isUstar = 'ustar' == strtolower(substr($header['magic'], 0, 5));
-       
+
         $checksumOk = $header['checksum'] == $checksum;
         if (isset($header['name']) && $checksumOk) {
             if ($header['name'] == '././@LongLink' && $header['type'] == 'L') {
@@ -305,6 +526,90 @@
     }
 
     /**
+     * Read and decode file header information from tarball
+     *
+     * @return array|boolean
+     */
+    protected function _extractFileHeader()
+    {
+        $archiveReader = $this->_getReader();
+
+        $headerBlock = $archiveReader->read(self::TAR_BLOCK_SIZE);
+
+        if (strlen($headerBlock) < self::TAR_BLOCK_SIZE) {
+            return false;
+        }
+
+        $header = unpack(self::_getFormatParseHeader(), $headerBlock);
+
+        $header['mode']     = octdec($header['mode']);
+        $header['uid']      = octdec($header['uid']);
+        $header['gid']      = octdec($header['gid']);
+        $header['size']     = octdec($header['size']);
+        $header['mtime']    = octdec($header['mtime']);
+        $header['checksum'] = octdec($header['checksum']);
+
+        if ($header['type'] == "5") {
+            $header['size'] = 0;
+        }
+
+        $checksum = 0;
+        $headerBlock = substr_replace($headerBlock, '        ', 148, 8);
+
+        for ($i = 0; $i < 512; $i++) {
+            $checksum += ord(substr($headerBlock, $i, 1));
+        }
+
+        $isUstar = 'ustar' == strtolower(substr($header['magic'], 0, 5));
+
+        $checksumOk = $header['checksum'] == $checksum;
+        if (isset($header['name']) && $checksumOk) {
+
+            if (!($header['name'] == '././@LongLink' && $header['type'] == 'L')) {
+                return $header;
+            }
+
+            $realNameBlockSize = floor(($header['size'] + self::TAR_BLOCK_SIZE - 1) / self::TAR_BLOCK_SIZE)
+                * self::TAR_BLOCK_SIZE;
+            $realNameBlock = $archiveReader->read($realNameBlockSize);
+            $realName = substr($realNameBlock, 0, $header['size']);
+
+            $headerMain = $this->_extractFileHeader();
+            $headerMain['name'] = $realName;
+            return $headerMain;
+        }
+
+        return false;
+    }
+
+    /**
+     * Extract next file from tarball by its $header information and save it to $destination
+     *
+     * @param array $fileHeader
+     * @param string $destination
+     */
+    protected function _extractAndWriteFile($fileHeader, $destination)
+    {
+        $fileWriter = new Mage_Archive_Helper_File($destination);
+        $fileWriter->open('w', $fileHeader['mode']);
+
+        $archiveReader = $this->_getReader();
+
+        $filesize = $fileHeader['size'];
+        $bytesExtracted = 0;
+
+        while ($filesize > $bytesExtracted && !$archiveReader->eof()) {
+            $block = $archiveReader->read(self::TAR_BLOCK_SIZE);
+            $nonExtractedBytesCount = $filesize - $bytesExtracted;
+
+            $data = substr($block, 0, $nonExtractedBytesCount);
+            $fileWriter->write($data);
+
+            $bytesExtracted += strlen($block);
+        }
+    }
+
+    /**
      * Pack file to TAR (Tape Archiver).
      *
      * @param string $source
@@ -312,14 +617,18 @@
      * @param boolean $skipRoot
      * @return string
      */
-    public function pack($source, $destination, $skipRoot=false)
+    public function pack($source, $destination, $skipRoot = false)
     {
         $this->_setSkipRoot($skipRoot);
         $source = realpath($source);
         $tarData = $this->_setCurrentPath($source)
-        ->_setCurrentFile($source)
-        ->_packToTar($skipRoot);
-        $this->_writeFile($destination, $tarData);
+            ->_setDestinationFilePath($destination)
+            ->_setCurrentFile($source);
+
+        $this->_initWriter();
+        $this->_createTar($skipRoot, true);
+        $this->_destroyWriter();
+
         return $destination;
     }
 
@@ -332,13 +641,13 @@
      */
     public function unpack($source, $destination)
     {
-        $tempFile = $destination . DS . '~tmp-'.microtime(true).'.tar';
-        $data = $this->_readFile($source);
-        $this->_writeFile($tempFile, $data);
-        $this->_setCurrentFile($tempFile)
-        ->_setCurrentPath($tempFile)
-        ->_unpackCurrentTar($destination);
-        unlink($tempFile);
+        $this->_setCurrentFile($source)
+            ->_setCurrentPath($source);
+
+        $this->_initReader();
+        $this->_unpackCurrentTar($destination);
+        $this->_destroyReader();
+
         return $destination;
     }
 
@@ -352,21 +661,28 @@
      */
     public function extract($file, $source, $destination)
     {
-        $pointer = fopen($source, 'r');
-        if (empty($pointer)) {
-            throw new Mage_Exception('Can\'t open file: '.$source);
-        }
-        $list = array();
+        $this->_setCurrentFile($source);
+        $this->_initReader();
+
+        $archiveReader = $this->_getReader();
         $extractedFile = '';
-        while (!feof($pointer)) {
-            $header = $this->_parseHeader($pointer);
+
+        while (!$archiveReader->eof()) {
+            $header = $this->_extractFileHeader();
             if ($header['name'] == $file) {
                 $extractedFile = $destination . basename($header['name']);
-                $this->_writeFile($extractedFile, $header['data']);
+                $this->_extractAndWriteFile($header, $extractedFile);
                 break;
             }
+
+            if ($header['type'] != 5){
+                $skipBytes = floor(($header['size'] + self::TAR_BLOCK_SIZE - 1) / self::TAR_BLOCK_SIZE)
+                    * self::TAR_BLOCK_SIZE;
+                $archiveReader->read($skipBytes);
+            }
         }
-        fclose($pointer);
+
+        $this->_destroyReader();
         return $extractedFile;
     }
 }
Index: lib/Mage/Archive/Helper/File.php
===================================================================
--- lib/Mage/Archive/Helper/File.php	(revision 0)
+++ lib/Mage/Archive/Helper/File.php	(revision 0)
@@ -0,0 +1,274 @@
+<?php
+/**
+ * Magento
+ *
+ * NOTICE OF LICENSE
+ *
+ * This source file is subject to the Open Software License (OSL 3.0)
+ * that is bundled with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://opensource.org/licenses/osl-3.0.php
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@magentocommerce.com so we can send you a copy immediately.
+ *
+ * DISCLAIMER
+ *
+ * Do not edit or add to this file if you wish to upgrade Magento to newer
+ * versions in the future. If you wish to customize Magento for your
+ * needs please refer to http://www.magentocommerce.com for more information.
+ *
+ * @category    Mage
+ * @package     Mage_Archive
+ * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
+ * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
+ */
+
+/**
+* Helper class that simplifies files stream reading and writing
+*
+* @category    Mage
+* @package     Mage_Archive
+* @author      Magento Core Team <core@magentocommerce.com>
+*/
+class Mage_Archive_Helper_File
+{
+    /**
+     * Full path to directory where file located
+     *
+     * @var string
+     */
+    protected $_fileLocation;
+
+    /**
+     * File name
+     *
+     * @var string
+     */
+    protected $_fileName;
+
+    /**
+     * Full path (directory + filename) to file
+     *
+     * @var string
+     */
+    protected $_filePath;
+
+    /**
+     * File permissions that will be set if file opened in write mode
+     *
+     * @var int
+     */
+    protected $_chmod;
+
+    /**
+     * File handler
+     *
+     * @var pointer
+     */
+    protected $_fileHandler;
+
+    /**
+     * Set file path via constructor
+     *
+     * @param string $filePath
+     */
+    public function __construct($filePath)
+    {
+        $pathInfo = pathinfo($filePath);
+
+        $this->_filePath = $filePath;
+        $this->_fileLocation = isset($pathInfo['dirname'])  ? $pathInfo['dirname'] : '';
+        $this->_fileName     = isset($pathInfo['basename']) ? $pathInfo['basename'] : '';
+    }
+
+    /**
+     * Close file if it's not closed before object destruction
+     */
+    public function __destruct()
+    {
+        if ($this->_fileHandler) {
+            $this->_close();
+        }
+    }
+
+    /**
+     * Open file
+     *
+     * @param string $mode
+     * @param int $chmod
+     * @throws Mage_Exception
+     */
+    public function open($mode = 'w+', $chmod = 0666)
+    {
+        if ($this->_isWritableMode($mode)) {
+            if (!is_writable($this->_fileLocation)) {
+                throw new Mage_Exception('Permission denied to write to ' . $this->_fileLocation);
+            }
+
+            if (is_file($this->_filePath) && !is_writable($this->_filePath)) {
+                throw new Mage_Exception("Can't open file " . $this->_fileName . " for writing. Permission denied.");
+            }
+        }
+
+        if ($this->_isReadableMode($mode) && (!is_file($this->_filePath) || !is_readable($this->_filePath))) {
+            if (!is_file($this->_filePath)) {
+                throw new Mage_Exception('File ' . $this->_filePath . ' does not exist');
+            }
+
+            if (!is_readable($this->_filePath)) {
+                throw new Mage_Exception('Permission denied to read file ' . $this->_filePath);
+            }
+        }
+
+        $this->_open($mode);
+
+        $this->_chmod = $chmod;
+    }
+
+    /**
+     * Write data to file
+     *
+     * @param string $data
+     */
+    public function write($data)
+    {
+        $this->_checkFileOpened();
+        $this->_write($data);
+    }
+
+    /**
+     * Read data from file
+     *
+     * @param int $length
+     * @return string|boolean
+     */
+    public function read($length = 4096)
+    {
+        $data = false;
+        $this->_checkFileOpened();
+        if ($length > 0) {
+            $data = $this->_read($length);
+        }
+
+        return $data;
+    }
+
+    /**
+     * Check whether end of file reached
+     *
+     * @return boolean
+     */
+    public function eof()
+    {
+        $this->_checkFileOpened();
+        return $this->_eof();
+    }
+
+    /**
+     * Close file
+     */
+    public function close()
+    {
+        $this->_checkFileOpened();
+        $this->_close();
+        $this->_fileHandler = false;
+        @chmod($this->_filePath, $this->_chmod);
+    }
+
+    /**
+     * Implementation of file opening
+     *
+     * @param string $mode
+     * @throws Mage_Exception
+     */
+    protected function _open($mode)
+    {
+        $this->_fileHandler = @fopen($this->_filePath, $mode);
+
+        if (false === $this->_fileHandler) {
+            throw new Mage_Exception('Failed to open file ' . $this->_filePath);
+        }
+    }
+
+    /**
+     * Implementation of writing data to file
+     *
+     * @param string $data
+     * @throws Mage_Exception
+     */
+    protected function _write($data)
+    {
+        $result = @fwrite($this->_fileHandler, $data);
+
+        if (false === $result) {
+            throw new Mage_Exception('Failed to write data to ' . $this->_filePath);
+        }
+    }
+
+    /**
+     * Implementation of file reading
+     *
+     * @param int $length
+     * @throws Mage_Exception
+     */
+    protected function _read($length)
+    {
+        $result = fread($this->_fileHandler, $length);
+
+        if (false === $result) {
+            throw new Mage_Exception('Failed to read data from ' . $this->_filePath);
+        }
+
+        return $result;
+    }
+
+    /**
+     * Implementation of EOF indicator
+     *
+     * @return boolean
+     */
+    protected function _eof()
+    {
+        return feof($this->_fileHandler);
+    }
+
+    /**
+     * Implementation of file closing
+     */
+    protected function _close()
+    {
+        fclose($this->_fileHandler);
+    }
+
+    /**
+     * Check whether requested mode is writable mode
+     *
+     * @param string $mode
+     */
+    protected function _isWritableMode($mode)
+    {
+        return preg_match('/(^[waxc])|(\+$)/', $mode);
+    }
+
+    /**
+    * Check whether requested mode is readable mode
+    *
+    * @param string $mode
+    */
+    protected function _isReadableMode($mode) {
+        return !$this->_isWritableMode($mode);
+    }
+
+    /**
+     * Check whether file is opened
+     *
+     * @throws Mage_Exception
+     */
+    protected function _checkFileOpened()
+    {
+        if (!$this->_fileHandler) {
+            throw new Mage_Exception('File not opened');
+        }
+    }
+}
Index: lib/Mage/Archive/Helper/File/Bz.php
===================================================================
--- lib/Mage/Archive/Helper/File/Bz.php	(revision 0)
+++ lib/Mage/Archive/Helper/File/Bz.php	(revision 0)
@@ -0,0 +1,92 @@
+<?php
+/**
+ * Magento
+ *
+ * NOTICE OF LICENSE
+ *
+ * This source file is subject to the Open Software License (OSL 3.0)
+ * that is bundled with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://opensource.org/licenses/osl-3.0.php
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@magentocommerce.com so we can send you a copy immediately.
+ *
+ * DISCLAIMER
+ *
+ * Do not edit or add to this file if you wish to upgrade Magento to newer
+ * versions in the future. If you wish to customize Magento for your
+ * needs please refer to http://www.magentocommerce.com for more information.
+ *
+ * @category    Mage
+ * @package     Mage_Archive
+ * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
+ * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
+ */
+
+/**
+* Helper class that simplifies bz2 files stream reading and writing
+*
+* @category    Mage
+* @package     Mage_Archive
+* @author      Magento Core Team <core@magentocommerce.com>
+*/
+class Mage_Archive_Helper_File_Bz extends Mage_Archive_Helper_File
+{
+    /**
+     * Open bz archive file
+     *
+     * @throws Mage_Exception
+     * @param string $mode
+     */
+    protected function _open($mode)
+    {
+        $this->_fileHandler = @bzopen($this->_filePath, $mode);
+
+        if (false === $this->_fileHandler) {
+            throw new Mage_Exception('Failed to open file ' . $this->_filePath);
+        }
+    }
+
+    /**
+     * Write data to bz archive
+     *
+     * @throws Mage_Exception
+     * @param $data
+     */
+    protected function _write($data)
+    {
+        $result = @bzwrite($this->_fileHandler, $data);
+
+        if (false === $result) {
+            throw new Mage_Exception('Failed to write data to ' . $this->_filePath);
+        }
+    }
+
+    /**
+     * Read data from bz archive
+     *
+     * @throws Mage_Exception
+     * @param int $length
+     * @return string
+     */
+    protected function _read($length)
+    {
+        $data = bzread($this->_fileHandler, $length);
+
+        if (false === $data) {
+            throw new Mage_Exception('Failed to read data from ' . $this->_filePath);
+        }
+
+        return $data;
+    }
+
+    /**
+     * Close bz archive
+     */
+    protected function _close()
+    {
+        bzclose($this->_fileHandler);
+    }
+}
+
Index: lib/Mage/Archive/Helper/File/Gz.php
===================================================================
--- lib/Mage/Archive/Helper/File/Gz.php	(revision 0)
+++ lib/Mage/Archive/Helper/File/Gz.php	(revision 0)
@@ -0,0 +1,83 @@
+<?php
+/**
+ * Magento
+ *
+ * NOTICE OF LICENSE
+ *
+ * This source file is subject to the Open Software License (OSL 3.0)
+ * that is bundled with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://opensource.org/licenses/osl-3.0.php
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@magentocommerce.com so we can send you a copy immediately.
+ *
+ * DISCLAIMER
+ *
+ * Do not edit or add to this file if you wish to upgrade Magento to newer
+ * versions in the future. If you wish to customize Magento for your
+ * needs please refer to http://www.magentocommerce.com for more information.
+ *
+ * @category    Mage
+ * @package     Mage_Archive
+ * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
+ * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
+ */
+
+/**
+* Helper class that simplifies gz files stream reading and writing
+*
+* @category    Mage
+* @package     Mage_Archive
+* @author      Magento Core Team <core@magentocommerce.com>
+*/
+class Mage_Archive_Helper_File_Gz extends Mage_Archive_Helper_File
+{
+    /**
+     * @see Mage_Archive_Helper_File::_open()
+     */
+    protected function _open($mode)
+    {
+        $this->_fileHandler = @gzopen($this->_filePath, $mode);
+
+        if (false === $this->_fileHandler) {
+            throw new Mage_Exception('Failed to open file ' . $this->_filePath);
+        }
+    }
+
+    /**
+     * @see Mage_Archive_Helper_File::_write()
+     */
+    protected function _write($data)
+    {
+        $result = @gzwrite($this->_fileHandler, $data);
+
+        if (empty($result) && !empty($data)) {
+            throw new Mage_Exception('Failed to write data to ' . $this->_filePath);
+        }
+    }
+
+    /**
+     * @see Mage_Archive_Helper_File::_read()
+     */
+    protected function _read($length)
+    {
+        return gzread($this->_fileHandler, $length);
+    }
+
+    /**
+     * @see Mage_Archive_Helper_File::_eof()
+     */
+    protected function _eof()
+    {
+        return gzeof($this->_fileHandler);
+    }
+
+    /**
+     * @see Mage_Archive_Helper_File::_close()
+     */
+    protected function _close()
+    {
+        gzclose($this->_fileHandler);
+    }
+}
Index: lib/Mage/Backup/Abstract.php
===================================================================
--- lib/Mage/Backup/Abstract.php	(revision 0)
+++ lib/Mage/Backup/Abstract.php	(revision 0)
@@ -0,0 +1,318 @@
+<?php
+/**
+ * Magento
+ *
+ * NOTICE OF LICENSE
+ *
+ * This source file is subject to the Open Software License (OSL 3.0)
+ * that is bundled with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://opensource.org/licenses/osl-3.0.php
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@magentocommerce.com so we can send you a copy immediately.
+ *
+ * DISCLAIMER
+ *
+ * Do not edit or add to this file if you wish to upgrade Magento to newer
+ * versions in the future. If you wish to customize Magento for your
+ * needs please refer to http://www.magentocommerce.com for more information.
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @copyright   Copyright (c) 2010 Magento Inc. (http://www.magentocommerce.com)
+ * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
+ */
+
+/**
+ * Class to work with archives
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @author      Magento Core Team <core@magentocommerce.com>
+ */
+abstract class Mage_Backup_Abstract implements  Mage_Backup_Interface
+{
+    /**
+     * Backup name
+     *
+     * @var string
+     */
+    protected $_name;
+
+    /**
+     * Backup creation date
+     *
+     * @var int
+     */
+    protected $_time;
+
+    /**
+     * Backup file extension
+     *
+     * @var string
+     */
+    protected $_backupExtension;
+
+    /**
+     * Resource model
+     *
+     * @var object
+     */
+    protected $_resourceModel;
+
+    /**
+     * Magento's root directory
+     *
+     * @var string
+     */
+    protected $_rootDir;
+
+    /**
+     * Path to directory where backups stored
+     *
+     * @var string
+     */
+    protected $_backupsDir;
+
+    /**
+     * Is last operation completed successfully
+     *
+     * @var bool
+     */
+    protected $_lastOperationSucceed = false;
+
+    /**
+     * Last failed operation error message
+     *
+     * @var string
+     */
+    protected $_lastErrorMessage;
+
+
+    /**
+     * Set Backup Extension
+     *
+     * @param string $backupExtension
+     * @return Mage_Backup_Interface
+     */
+    public function setBackupExtension($backupExtension)
+    {
+        $this->_backupExtension = $backupExtension;
+        return $this;
+    }
+
+    /**
+     * Get Backup Extension
+     *
+     * @return string
+     */
+    public function getBackupExtension()
+    {
+        return $this->_backupExtension;
+    }
+
+    /**
+     * Set Resource Model
+     *
+     * @param object $resourceModel
+     * @return Mage_Backup_Interface
+     */
+    public function setResourceModel($resourceModel)
+    {
+        $this->_resourceModel = $resourceModel;
+        return $this;
+    }
+
+    /**
+     * Get Resource Model
+     *
+     * @return object
+     */
+    public function getResourceModel()
+    {
+        return $this->_resourceModel;
+    }
+
+    /**
+     * Set Time
+     *
+     * @param int $time
+     * @return Mage_Backup_Interface
+     */
+    public function setTime($time)
+    {
+        $this->_time = $time;
+        return $this;
+    }
+
+    /**
+     * Get Time
+     *
+     * @return int
+     */
+    public function getTime()
+    {
+        return $this->_time;
+    }
+
+    /**
+     * Set root directory of Magento installation
+     *
+     * @param string $rootDir
+     * @throws Mage_Exception
+     * @return Mage_Backup_Interface
+     */
+    public function setRootDir($rootDir)
+    {
+        if (!is_dir($rootDir)) {
+            throw new Mage_Exception('Bad root directory');
+        }
+
+        $this->_rootDir = $rootDir;
+        return $this;
+    }
+
+    /**
+     * Get Magento's root directory
+     * @return string
+     */
+    public function getRootDir()
+    {
+        return $this->_rootDir;
+    }
+
+    /**
+     * Set path to directory where backups stored
+     *
+     * @param string $backupsDir
+     * @return Mage_Backup_Interface
+     */
+    public function setBackupsDir($backupsDir)
+    {
+        $this->_backupsDir = $backupsDir;
+        return $this;
+    }
+
+    /**
+     * Get path to directory where backups stored
+     *
+     * @return string
+     */
+    public function getBackupsDir()
+    {
+        return $this->_backupsDir;
+    }
+
+    /**
+     * Get path to backup
+     *
+     * @return string
+     */
+    public function getBackupPath()
+    {
+        return $this->getBackupsDir() . DS . $this->getBackupFilename();
+    }
+
+    /**
+     * Get backup file name
+     *
+     * @return string
+     */
+    public function getBackupFilename()
+    {
+        $filename = $this->getTime() . '_' . $this->getType();
+
+        $name = $this->getName();
+
+        if (!empty($name)) {
+            $filename .= '_' . $name;
+        }
+
+        $filename .= '.' . $this->getBackupExtension();
+
+        return $filename;
+    }
+
+    /**
+     * Check whether last operation completed successfully
+     *
+     * @return bool
+     */
+    public function getIsSuccess()
+    {
+        return $this->_lastOperationSucceed;
+    }
+
+    /**
+     * Get last error message
+     *
+     * @return string
+     */
+    public function getErrorMessage()
+    {
+        return $this->_lastErrorMessage;
+    }
+
+    /**
+     * Set error message
+     *
+     * @param string $errorMessage
+     * @return string
+     */
+    public function setErrorMessage($errorMessage)
+    {
+        $this->_lastErrorMessage = $errorMessage;
+    }
+
+    /**
+     * Set backup name
+     *
+     * @param string $name
+     * @param bool $applyFilter
+     * @return Mage_Backup_Interface
+     */
+    public function setName($name, $applyFilter = true)
+    {
+        if ($applyFilter) {
+            $name = $this->_filterName($name);
+        }
+        $this->_name = $name;
+        return $this;
+    }
+
+    /**
+     * Get backup name
+     *
+     * @return string
+     */
+    public function getName()
+    {
+        return $this->_name;
+    }
+
+    /**
+     * Get backup display name
+     *
+     * @return string
+     */
+    public function getDisplayName()
+    {
+        return str_replace('_', ' ', $this->_name);
+    }
+
+    /**
+     * Removes disallowed characters and replaces spaces with underscores
+     *
+     * @param string $name
+     * @return string
+     */
+    protected function _filterName($name)
+    {
+        $name = trim(preg_replace('/[^\da-zA-Z ]/', '', $name));
+        $name = preg_replace('/\s{2,}/', ' ', $name);
+        $name = str_replace(' ', '_', $name);
+
+        return $name;
+    }
+}
Index: lib/Mage/Backup/Db.php
===================================================================
--- lib/Mage/Backup/Db.php	(revision 0)
+++ lib/Mage/Backup/Db.php	(revision 0)
@@ -0,0 +1,119 @@
+<?php
+/**
+ * Magento
+ *
+ * NOTICE OF LICENSE
+ *
+ * This source file is subject to the Open Software License (OSL 3.0)
+ * that is bundled with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://opensource.org/licenses/osl-3.0.php
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@magentocommerce.com so we can send you a copy immediately.
+ *
+ * DISCLAIMER
+ *
+ * Do not edit or add to this file if you wish to upgrade Magento to newer
+ * versions in the future. If you wish to customize Magento for your
+ * needs please refer to http://www.magentocommerce.com for more information.
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @copyright   Copyright (c) 2010 Magento Inc. (http://www.magentocommerce.com)
+ * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
+ */
+
+/**
+ * Class to work with database backups
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @author      Magento Core Team <core@magentocommerce.com>
+ */
+class Mage_Backup_Db extends Mage_Backup_Abstract
+{
+    /**
+     * Implements Rollback functionality for Db
+     *
+     * @return bool
+     */
+    public function rollback()
+    {
+        set_time_limit(0);
+        ignore_user_abort(true);
+
+        $this->_lastOperationSucceed = false;
+
+        $archiveManager = new Mage_Archive();
+        $source = $archiveManager->unpack($this->getBackupPath(), $this->getBackupsDir());
+
+        $file = new Mage_Backup_Filesystem_Iterator_File($source);
+        foreach ($file as $statement) {
+            $this->getResourceModel()->runCommand($statement);
+        }
+        @unlink($source);
+
+        $this->_lastOperationSucceed = true;
+
+        return true;
+    }
+
+    /**
+     * Checks whether the line is last in sql command
+     *
+     * @param $line
+     * @return bool
+     */
+    protected function _isLineLastInCommand($line)
+    {
+        $cleanLine = trim($line);
+        $lineLength = strlen($cleanLine);
+
+        $returnResult = false;
+        if ($lineLength > 0){
+            $lastSymbolIndex = $lineLength-1;
+            if ($cleanLine[$lastSymbolIndex] == ';'){
+                $returnResult = true;
+            }
+        }
+
+        return $returnResult;
+    }
+
+    /**
+     * Implements Create Backup functionality for Db
+     *
+     * @return bool
+     */
+    public function create()
+    {
+        set_time_limit(0);
+        ignore_user_abort(true);
+
+        $this->_lastOperationSucceed = false;
+
+        $backup = Mage::getModel('backup/backup')
+            ->setTime($this->getTime())
+            ->setType($this->getType())
+            ->setPath($this->getBackupsDir())
+            ->setName($this->getName());
+
+        $backupDb = Mage::getModel('backup/db');
+        $backupDb->createBackup($backup);
+
+        $this->_lastOperationSucceed = true;
+
+        return true;
+    }
+
+    /**
+     * Get Backup Type
+     *
+     * @return string
+     */
+    public function getType()
+    {
+        return 'db';
+    }
+}
Index: lib/Mage/Backup/Exception.php
===================================================================
--- lib/Mage/Backup/Exception.php	(revision 0)
+++ lib/Mage/Backup/Exception.php	(revision 0)
@@ -0,0 +1,36 @@
+<?php
+/**
+ * Magento
+ *
+ * NOTICE OF LICENSE
+ *
+ * This source file is subject to the Open Software License (OSL 3.0)
+ * that is bundled with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://opensource.org/licenses/osl-3.0.php
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@magentocommerce.com so we can send you a copy immediately.
+ *
+ * DISCLAIMER
+ *
+ * Do not edit or add to this file if you wish to upgrade Magento to newer
+ * versions in the future. If you wish to customize Magento for your
+ * needs please refer to http://www.magentocommerce.com for more information.
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @copyright   Copyright (c) 2010 Magento Inc. (http://www.magentocommerce.com)
+ * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
+ */
+
+/**
+ * Exception
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @author      Magento Core Team <core@magentocommerce.com>
+ */
+class Mage_Backup_Exception extends Mage_Exception
+{
+}
Index: lib/Mage/Backup/Filesystem.php
===================================================================
--- lib/Mage/Backup/Filesystem.php	(revision 0)
+++ lib/Mage/Backup/Filesystem.php	(revision 0)
@@ -0,0 +1,284 @@
+<?php
+/**
+ * Magento
+ *
+ * NOTICE OF LICENSE
+ *
+ * This source file is subject to the Open Software License (OSL 3.0)
+ * that is bundled with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://opensource.org/licenses/osl-3.0.php
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@magentocommerce.com so we can send you a copy immediately.
+ *
+ * DISCLAIMER
+ *
+ * Do not edit or add to this file if you wish to upgrade Magento to newer
+ * versions in the future. If you wish to customize Magento for your
+ * needs please refer to http://www.magentocommerce.com for more information.
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @copyright   Copyright (c) 2010 Magento Inc. (http://www.magentocommerce.com)
+ * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
+ */
+
+/**
+ * Class to work with filesystem backups
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @author      Magento Core Team <core@magentocommerce.com>
+ */
+class Mage_Backup_Filesystem extends Mage_Backup_Abstract
+{
+    /**
+     * Paths that ignored when creating or rolling back snapshot
+     *
+     * @var array
+     */
+    protected $_ignorePaths = array();
+
+    /**
+     * Whether use ftp account for rollback procedure
+     *
+     * @var bool
+     */
+    protected $_useFtp = false;
+
+    /**
+     * Ftp host
+     *
+     * @var string
+     */
+    protected $_ftpHost;
+
+    /**
+     * Ftp username
+     *
+     * @var string
+     */
+    protected $_ftpUser;
+
+    /**
+     * Password to ftp account
+     *
+     * @var string
+     */
+    protected $_ftpPass;
+
+    /**
+     * Ftp path to Magento installation
+     *
+     * @var string
+     */
+    protected $_ftpPath;
+
+    /**
+     * Implementation Rollback functionality for Filesystem
+     *
+     * @throws Mage_Exception
+     * @return bool
+     */
+    public function rollback()
+    {
+        $this->_lastOperationSucceed = false;
+
+        set_time_limit(0);
+        ignore_user_abort(true);
+
+        $rollbackWorker = $this->_useFtp ? new Mage_Backup_Filesystem_Rollback_Ftp($this)
+            : new Mage_Backup_Filesystem_Rollback_Fs($this);
+        $rollbackWorker->run();
+
+        $this->_lastOperationSucceed = true;
+    }
+
+    /**
+     * Implementation Create Backup functionality for Filesystem
+     *
+     * @throws Mage_Exception
+     * @return boolean
+     */
+    public function create()
+    {
+        set_time_limit(0);
+        ignore_user_abort(true);
+
+        $this->_lastOperationSucceed = false;
+
+        $this->_checkBackupsDir();
+
+        $fsHelper = new Mage_Backup_Filesystem_Helper();
+
+        $filesInfo = $fsHelper->getInfo(
+            $this->getRootDir(),
+            Mage_Backup_Filesystem_Helper::INFO_READABLE | Mage_Backup_Filesystem_Helper::INFO_SIZE,
+            $this->getIgnorePaths()
+        );
+
+        if (!$filesInfo['readable']) {
+            throw new Mage_Backup_Exception_NotEnoughPermissions('Not enough permissions to read files for backup');
+        }
+
+        $freeSpace = disk_free_space($this->getBackupsDir());
+
+        if (2 * $filesInfo['size'] > $freeSpace) {
+            throw new Mage_Backup_Exception_NotEnoughFreeSpace('Not enough free space to create backup');
+        }
+
+        $tarTmpPath = $this->_getTarTmpPath();
+
+        $tarPacker = new Mage_Backup_Archive_Tar();
+        $tarPacker->setSkipFiles($this->getIgnorePaths())
+            ->pack($this->getRootDir(), $tarTmpPath, true);
+
+        if (!is_file($tarTmpPath) || filesize($tarTmpPath) == 0) {
+            throw new Mage_Exception('Failed to create backup');
+        }
+
+        $backupPath = $this->getBackupPath();
+
+        $gzPacker = new Mage_Archive_Gz();
+        $gzPacker->pack($tarTmpPath, $backupPath);
+
+        if (!is_file($backupPath) || filesize($backupPath) == 0) {
+            throw new Mage_Exception('Failed to create backup');
+        }
+
+        @unlink($tarTmpPath);
+
+        $this->_lastOperationSucceed = true;
+    }
+
+    /**
+     * Force class to use ftp for rollback procedure
+     *
+     * @param string $host
+     * @param string $username
+     * @param string $password
+     * @param string $path
+     * @return Mage_Backup_Filesystem
+     */
+    public function setUseFtp($host, $username, $password, $path)
+    {
+        $this->_useFtp = true;
+        $this->_ftpHost = $host;
+        $this->_ftpUser = $username;
+        $this->_ftpPass = $password;
+        $this->_ftpPath = $path;
+        return $this;
+    }
+
+    /**
+     * Get backup type
+     *
+     * @see Mage_Backup_Interface::getType()
+     * @return string
+     */
+    public function getType()
+    {
+        return 'filesystem';
+    }
+
+    /**
+     * Add path that should be ignoring when creating or rolling back backup
+     *
+     * @param string|array $paths
+     * @return Mage_Backup_Filesystem
+     */
+    public function addIgnorePaths($paths)
+    {
+        if (is_string($paths)) {
+            if (!in_array($paths, $this->_ignorePaths)) {
+                $this->_ignorePaths[] = $paths;
+            }
+        }
+        else if (is_array($paths)) {
+            foreach ($paths as $path) {
+                $this->addIgnorePaths($path);
+            }
+        }
+
+        return $this;
+    }
+
+    /**
+     * Get paths that should be ignored while creating or rolling back backup procedure
+     *
+     * @return array
+     */
+    public function getIgnorePaths()
+    {
+        return $this->_ignorePaths;
+    }
+
+    /**
+     * Set directory where backups saved and add it to ignore paths
+     *
+     * @see Mage_Backup_Abstract::setBackupsDir()
+     * @param string $backupsDir
+     * @return Mage_Backup_Filesystem
+     */
+    public function setBackupsDir($backupsDir)
+    {
+        parent::setBackupsDir($backupsDir);
+        $this->addIgnorePaths($backupsDir);
+        return $this;
+    }
+
+    /**
+     * getter for $_ftpPath variable
+     *
+     * @return string
+     */
+    public function getFtpPath()
+    {
+        return $this->_ftpPath;
+    }
+
+    /**
+     * Get ftp connection string
+     *
+     * @return string
+     */
+    public function getFtpConnectString()
+    {
+        return 'ftp://' . $this->_ftpUser . ':' . $this->_ftpPass . '@' . $this->_ftpHost . $this->_ftpPath;
+    }
+
+    /**
+     * Check backups directory existance and whether it's writeable
+     *
+     * @throws Mage_Exception
+     */
+    protected function _checkBackupsDir()
+    {
+        $backupsDir = $this->getBackupsDir();
+
+        if (!is_dir($backupsDir)) {
+            $backupsDirParentDirectory = basename($backupsDir);
+
+            if (!is_writeable($backupsDirParentDirectory)) {
+                throw new Mage_Backup_Exception_NotEnoughPermissions('Cant create backups directory');
+            }
+
+            mkdir($backupsDir);
+            chmod($backupsDir, 0777);
+        }
+
+        if (!is_writable($backupsDir)) {
+            throw new Mage_Backup_Exception_NotEnoughPermissions('Backups directory is not writeable');
+        }
+    }
+
+    /**
+     * Generate tmp name for tarball
+     */
+    protected function _getTarTmpPath()
+    {
+        $tmpName = '~tmp-'. microtime(true) . '.tar';
+        return $this->getBackupsDir() . DS . $tmpName;
+    }
+}
Index: lib/Mage/Backup/Interface.php
===================================================================
--- lib/Mage/Backup/Interface.php	(revision 0)
+++ lib/Mage/Backup/Interface.php	(revision 0)
@@ -0,0 +1,88 @@
+<?php
+/**
+ * Magento
+ *
+ * NOTICE OF LICENSE
+ *
+ * This source file is subject to the Open Software License (OSL 3.0)
+ * that is bundled with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://opensource.org/licenses/osl-3.0.php
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@magentocommerce.com so we can send you a copy immediately.
+ *
+ * DISCLAIMER
+ *
+ * Do not edit or add to this file if you wish to upgrade Magento to newer
+ * versions in the future. If you wish to customize Magento for your
+ * needs please refer to http://www.magentocommerce.com for more information.
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @copyright   Copyright (c) 2010 Magento Inc. (http://www.magentocommerce.com)
+ * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
+ */
+
+/**
+ * Interface for work with archives
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @author      Magento Core Team <core@magentocommerce.com>
+ */
+interface Mage_Backup_Interface
+{
+    /**
+     * Create Backup
+     *
+     * @return boolean
+     */
+    public function create();
+
+    /**
+     * Rollback Backup
+     *
+     * @return boolean
+     */
+    public function rollback();
+
+     /**
+     * Set Backup Extension
+     *
+     * @param string $backupExtension
+     * @return Mage_Backup_Interface
+     */
+    public function setBackupExtension($backupExtension);
+
+    /**
+     * Set Resource Model
+     *
+     * @param object $resourceModel
+     * @return Mage_Backup_Interface
+     */
+    public function setResourceModel($resourceModel);
+
+    /**
+     * Set Time
+     *
+     * @param int $time
+     * @return Mage_Backup_Interface
+     */
+    public function setTime($time);
+
+    /**
+    * Get Backup Type
+    *
+    * @return string
+    */
+    public function getType();
+
+    /**
+     * Set path to directory where backups stored
+     *
+     * @param string $backupsDir
+     * @return Mage_Backup_Interface
+     */
+    public function setBackupsDir($backupsDir);
+}
Index: lib/Mage/Backup/Media.php
===================================================================
--- lib/Mage/Backup/Media.php	(revision 0)
+++ lib/Mage/Backup/Media.php	(revision 0)
@@ -0,0 +1,99 @@
+<?php
+/**
+ * Magento
+ *
+ * NOTICE OF LICENSE
+ *
+ * This source file is subject to the Open Software License (OSL 3.0)
+ * that is bundled with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://opensource.org/licenses/osl-3.0.php
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@magentocommerce.com so we can send you a copy immediately.
+ *
+ * DISCLAIMER
+ *
+ * Do not edit or add to this file if you wish to upgrade Magento to newer
+ * versions in the future. If you wish to customize Magento for your
+ * needs please refer to http://www.magentocommerce.com for more information.
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @copyright   Copyright (c) 2010 Magento Inc. (http://www.magentocommerce.com)
+ * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
+ */
+
+/**
+ * Class to work media folder and database backups
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @author      Magento Core Team <core@magentocommerce.com>
+ */
+class Mage_Backup_Media extends Mage_Backup_Snapshot
+{
+    /**
+     * Implementation Rollback functionality for Snapshot
+     *
+     * @throws Mage_Exception
+     * @return bool
+     */
+    public function rollback()
+    {
+        $this->_prepareIgnoreList();
+        return parent::rollback();
+    }
+
+    /**
+     * Implementation Create Backup functionality for Snapshot
+     *
+     * @throws Mage_Exception
+     * @return bool
+     */
+    public function create()
+    {
+        $this->_prepareIgnoreList();
+        return parent::create();
+    }
+
+    /**
+     * Overlap getType
+     *
+     * @return string
+     * @see Mage_Backup_Interface::getType()
+     */
+    public function getType()
+    {
+        return 'media';
+    }
+
+    /**
+     * Add all folders and files except media and db backup to ignore list
+     *
+     * @return Mage_Backup_Media
+     */
+    protected function _prepareIgnoreList()
+    {
+        $iterator = new DirectoryIterator($this->getRootDir());
+
+        foreach ($iterator as $item) {
+            $filename = $item->getFilename();
+            if (!in_array($filename, array('media', 'var'))) {
+                $this->addIgnorePaths($item->getPathname());
+            }
+        }
+
+        $iterator = new DirectoryIterator($this->getRootDir() . DS . 'var');
+        $dbBackupFilename = $this->_getDbBackupManager()->getBackupFilename();
+
+        foreach ($iterator as $item) {
+            $filename = $item->getFilename();
+            if ($filename != $dbBackupFilename) {
+                $this->addIgnorePaths($item->getPathname());
+            }
+        }
+
+        return $this;
+    }
+}
Index: lib/Mage/Backup/Nomedia.php
===================================================================
--- lib/Mage/Backup/Nomedia.php	(revision 0)
+++ lib/Mage/Backup/Nomedia.php	(revision 0)
@@ -0,0 +1,82 @@
+<?php
+/**
+ * Magento
+ *
+ * NOTICE OF LICENSE
+ *
+ * This source file is subject to the Open Software License (OSL 3.0)
+ * that is bundled with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://opensource.org/licenses/osl-3.0.php
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@magentocommerce.com so we can send you a copy immediately.
+ *
+ * DISCLAIMER
+ *
+ * Do not edit or add to this file if you wish to upgrade Magento to newer
+ * versions in the future. If you wish to customize Magento for your
+ * needs please refer to http://www.magentocommerce.com for more information.
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @copyright   Copyright (c) 2010 Magento Inc. (http://www.magentocommerce.com)
+ * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
+ */
+
+/**
+ * Class to work system backup that excludes media folder
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @author      Magento Core Team <core@magentocommerce.com>
+ */
+class Mage_Backup_Nomedia extends Mage_Backup_Snapshot
+{
+    /**
+     * Implementation Rollback functionality for Snapshot
+     *
+     * @throws Mage_Exception
+     * @return bool
+     */
+    public function rollback()
+    {
+        $this->_prepareIgnoreList();
+        return parent::rollback();
+    }
+
+    /**
+     * Implementation Create Backup functionality for Snapshot
+     *
+     * @throws Mage_Exception
+     * @return bool
+     */
+    public function create()
+    {
+        $this->_prepareIgnoreList();
+        return parent::create();
+    }
+
+    /**
+     * Overlap getType
+     *
+     * @return string
+     * @see Mage_Backup_Interface::getType()
+     */
+    public function getType()
+    {
+        return 'nomedia';
+    }
+
+    /**
+     * Add media folder to ignore list
+     *
+     * @return Mage_Backup_Media
+     */
+    protected function _prepareIgnoreList()
+    {
+        $this->addIgnorePaths($this->getRootDir() . DS . 'media');
+
+        return $this;
+    }
+}
Index: lib/Mage/Backup/Snapshot.php
===================================================================
--- lib/Mage/Backup/Snapshot.php	(revision 0)
+++ lib/Mage/Backup/Snapshot.php	(revision 0)
@@ -0,0 +1,140 @@
+<?php
+/**
+ * Magento
+ *
+ * NOTICE OF LICENSE
+ *
+ * This source file is subject to the Open Software License (OSL 3.0)
+ * that is bundled with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://opensource.org/licenses/osl-3.0.php
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@magentocommerce.com so we can send you a copy immediately.
+ *
+ * DISCLAIMER
+ *
+ * Do not edit or add to this file if you wish to upgrade Magento to newer
+ * versions in the future. If you wish to customize Magento for your
+ * needs please refer to http://www.magentocommerce.com for more information.
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @copyright   Copyright (c) 2010 Magento Inc. (http://www.magentocommerce.com)
+ * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
+ */
+
+/**
+ * Class to work with full filesystem and database backups
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @author      Magento Core Team <core@magentocommerce.com>
+ */
+class Mage_Backup_Snapshot extends Mage_Backup_Filesystem
+{
+    /**
+     * Database backup manager
+     *
+     * @var Mage_Backup_Db
+     */
+    protected $_dbBackupManager;
+
+    /**
+     * Implementation Rollback functionality for Snapshot
+     *
+     * @throws Mage_Exception
+     * @return bool
+     */
+    public function rollback()
+    {
+        $result = parent::rollback();
+
+        $this->_lastOperationSucceed = false;
+
+        try {
+            $this->_getDbBackupManager()->rollback();
+        } catch (Exception $e) {
+            $this->_removeDbBackup();
+            throw $e;
+        }
+
+        $this->_removeDbBackup();
+        $this->_lastOperationSucceed = true;
+
+        return $result;
+    }
+
+    /**
+     * Implementation Create Backup functionality for Snapshot
+     *
+     * @throws Mage_Exception
+     * @return bool
+     */
+    public function create()
+    {
+        $this->_getDbBackupManager()->create();
+
+        try {
+            $result = parent::create();
+        } catch (Exception $e) {
+            $this->_removeDbBackup();
+            throw $e;
+        }
+
+        $this->_lastOperationSucceed = false;
+        $this->_removeDbBackup();
+        $this->_lastOperationSucceed = true;
+
+        return $result;
+    }
+
+    /**
+     * Overlap getType
+     *
+     * @return string
+     * @see Mage_Backup_Interface::getType()
+     */
+    public function getType()
+    {
+        return 'snapshot';
+    }
+
+    /**
+     * Create Db Instance
+     *
+     * @return Mage_Backup_Interface
+     */
+    protected function _createDbBackupInstance()
+    {
+        return Mage_Backup::getBackupInstance(Mage_Backup_Helper_Data::TYPE_DB)
+            ->setBackupExtension(Mage::helper('backup')->getExtensionByType(Mage_Backup_Helper_Data::TYPE_DB))
+            ->setTime($this->getTime())
+            ->setBackupsDir(Mage::getBaseDir("var"))
+            ->setResourceModel($this->getResourceModel());
+    }
+
+    /**
+     * Get database backup manager
+     *
+     * @return Mage_Backup_Db
+     */
+    protected function _getDbBackupManager()
+    {
+        if (is_null($this->_dbBackupManager)) {
+            $this->_dbBackupManager = $this->_createDbBackupInstance();
+        }
+
+        return $this->_dbBackupManager;
+    }
+
+    /**
+     * Remove Db backup after added it to the snapshot
+     *
+     * @return Mage_Backup_Snapshot
+     */
+    protected function _removeDbBackup(){
+        @unlink($this->_getDbBackupManager()->getBackupPath());
+        return $this;
+    }
+}
Index: lib/Mage/Backup/Archive/Tar.php
===================================================================
--- lib/Mage/Backup/Archive/Tar.php	(revision 0)
+++ lib/Mage/Backup/Archive/Tar.php	(revision 0)
@@ -0,0 +1,81 @@
+<?php
+/**
+ * Magento
+ *
+ * NOTICE OF LICENSE
+ *
+ * This source file is subject to the Open Software License (OSL 3.0)
+ * that is bundled with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://opensource.org/licenses/osl-3.0.php
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@magentocommerce.com so we can send you a copy immediately.
+ *
+ * DISCLAIMER
+ *
+ * Do not edit or add to this file if you wish to upgrade Magento to newer
+ * versions in the future. If you wish to customize Magento for your
+ * needs please refer to http://www.magentocommerce.com for more information.
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @copyright   Copyright (c) 2010 Magento Inc. (http://www.magentocommerce.com)
+ * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
+ */
+
+/**
+ * Extended version of Mage_Archive_Tar that supports filtering
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @author      Magento Core Team <core@magentocommerce.com>
+ */
+class Mage_Backup_Archive_Tar extends Mage_Archive_Tar
+{
+    /**
+     * Filenames or filename parts that are used for filtering files
+     *
+     * @var array()
+     */
+    protected $_skipFiles = array();
+
+    /**
+     * Overridden Mage_Archive_Tar::_createTar method that does the same actions as it's parent but filters
+     * files using Mage_Backup_Filesystem_Iterator_Filter
+     *
+     * @see Mage_Archive_Tar::_createTar()
+     * @param bool $skipRoot
+     * @param bool $finalize
+     */
+    protected function _createTar($skipRoot = false, $finalize = false)
+    {
+        $path = $this->_getCurrentFile();
+
+        $iterator = new RecursiveIteratorIterator(
+            new Mage_Backup_Filesystem_Iterator_Filter(new RecursiveDirectoryIterator($path), $this->_skipFiles),
+            RecursiveIteratorIterator::SELF_FIRST
+        );
+
+        foreach ($iterator as $item) {
+            $this->_setCurrentFile($item->getPathname());
+            $this->_packAndWriteCurrentFile();
+        }
+
+        if ($finalize) {
+            $this->_getWriter()->write(str_repeat("\0", self::TAR_BLOCK_SIZE * 12));
+        }
+    }
+
+    /**
+     * Set files that shouldn't be added to tarball
+     *
+     * @param array $skipFiles
+     * @return Mage_Backup_Archive_Tar
+     */
+    public function setSkipFiles(array $skipFiles)
+    {
+        $this->_skipFiles = $skipFiles;
+        return $this;
+    }
+}
Index: lib/Mage/Backup/Exception/CantLoadSnapshot.php
===================================================================
--- lib/Mage/Backup/Exception/CantLoadSnapshot.php	(revision 0)
+++ lib/Mage/Backup/Exception/CantLoadSnapshot.php	(revision 0)
@@ -0,0 +1,36 @@
+<?php
+/**
+ * Magento
+ *
+ * NOTICE OF LICENSE
+ *
+ * This source file is subject to the Open Software License (OSL 3.0)
+ * that is bundled with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://opensource.org/licenses/osl-3.0.php
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@magentocommerce.com so we can send you a copy immediately.
+ *
+ * DISCLAIMER
+ *
+ * Do not edit or add to this file if you wish to upgrade Magento to newer
+ * versions in the future. If you wish to customize Magento for your
+ * needs please refer to http://www.magentocommerce.com for more information.
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @copyright   Copyright (c) 2010 Magento Inc. (http://www.magentocommerce.com)
+ * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
+ */
+
+/**
+ * Exception
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @author      Magento Core Team <core@magentocommerce.com>
+ */
+class Mage_Backup_Exception_CantLoadSnapshot extends Mage_Backup_Exception
+{
+}
Index: lib/Mage/Backup/Exception/FtpConnectionFailed.php
===================================================================
--- lib/Mage/Backup/Exception/FtpConnectionFailed.php	(revision 0)
+++ lib/Mage/Backup/Exception/FtpConnectionFailed.php	(revision 0)
@@ -0,0 +1,36 @@
+<?php
+/**
+ * Magento
+ *
+ * NOTICE OF LICENSE
+ *
+ * This source file is subject to the Open Software License (OSL 3.0)
+ * that is bundled with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://opensource.org/licenses/osl-3.0.php
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@magentocommerce.com so we can send you a copy immediately.
+ *
+ * DISCLAIMER
+ *
+ * Do not edit or add to this file if you wish to upgrade Magento to newer
+ * versions in the future. If you wish to customize Magento for your
+ * needs please refer to http://www.magentocommerce.com for more information.
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @copyright   Copyright (c) 2010 Magento Inc. (http://www.magentocommerce.com)
+ * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
+ */
+
+/**
+ * Exception
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @author      Magento Core Team <core@magentocommerce.com>
+ */
+class Mage_Backup_Exception_FtpConnectionFailed extends Mage_Backup_Exception
+{
+}
Index: lib/Mage/Backup/Exception/FtpValidationFailed.php
===================================================================
--- lib/Mage/Backup/Exception/FtpValidationFailed.php	(revision 0)
+++ lib/Mage/Backup/Exception/FtpValidationFailed.php	(revision 0)
@@ -0,0 +1,36 @@
+<?php
+/**
+ * Magento
+ *
+ * NOTICE OF LICENSE
+ *
+ * This source file is subject to the Open Software License (OSL 3.0)
+ * that is bundled with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://opensource.org/licenses/osl-3.0.php
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@magentocommerce.com so we can send you a copy immediately.
+ *
+ * DISCLAIMER
+ *
+ * Do not edit or add to this file if you wish to upgrade Magento to newer
+ * versions in the future. If you wish to customize Magento for your
+ * needs please refer to http://www.magentocommerce.com for more information.
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @copyright   Copyright (c) 2010 Magento Inc. (http://www.magentocommerce.com)
+ * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
+ */
+
+/**
+ * Exception
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @author      Magento Core Team <core@magentocommerce.com>
+ */
+class Mage_Backup_Exception_FtpValidationFailed extends Mage_Backup_Exception
+{
+}
Index: lib/Mage/Backup/Exception/NotEnoughFreeSpace.php
===================================================================
--- lib/Mage/Backup/Exception/NotEnoughFreeSpace.php	(revision 0)
+++ lib/Mage/Backup/Exception/NotEnoughFreeSpace.php	(revision 0)
@@ -0,0 +1,36 @@
+<?php
+/**
+ * Magento
+ *
+ * NOTICE OF LICENSE
+ *
+ * This source file is subject to the Open Software License (OSL 3.0)
+ * that is bundled with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://opensource.org/licenses/osl-3.0.php
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@magentocommerce.com so we can send you a copy immediately.
+ *
+ * DISCLAIMER
+ *
+ * Do not edit or add to this file if you wish to upgrade Magento to newer
+ * versions in the future. If you wish to customize Magento for your
+ * needs please refer to http://www.magentocommerce.com for more information.
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @copyright   Copyright (c) 2010 Magento Inc. (http://www.magentocommerce.com)
+ * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
+ */
+
+/**
+ * Exception
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @author      Magento Core Team <core@magentocommerce.com>
+ */
+class Mage_Backup_Exception_NotEnoughFreeSpace extends Mage_Backup_Exception
+{
+}
Index: lib/Mage/Backup/Exception/NotEnoughPermissions.php
===================================================================
--- lib/Mage/Backup/Exception/NotEnoughPermissions.php	(revision 0)
+++ lib/Mage/Backup/Exception/NotEnoughPermissions.php	(revision 0)
@@ -0,0 +1,36 @@
+<?php
+/**
+ * Magento
+ *
+ * NOTICE OF LICENSE
+ *
+ * This source file is subject to the Open Software License (OSL 3.0)
+ * that is bundled with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://opensource.org/licenses/osl-3.0.php
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@magentocommerce.com so we can send you a copy immediately.
+ *
+ * DISCLAIMER
+ *
+ * Do not edit or add to this file if you wish to upgrade Magento to newer
+ * versions in the future. If you wish to customize Magento for your
+ * needs please refer to http://www.magentocommerce.com for more information.
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @copyright   Copyright (c) 2010 Magento Inc. (http://www.magentocommerce.com)
+ * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
+ */
+
+/**
+ * Exception
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @author      Magento Core Team <core@magentocommerce.com>
+ */
+class Mage_Backup_Exception_NotEnoughPermissions extends Mage_Backup_Exception
+{
+}
Index: lib/Mage/Backup/Filesystem/Helper.php
===================================================================
--- lib/Mage/Backup/Filesystem/Helper.php	(revision 0)
+++ lib/Mage/Backup/Filesystem/Helper.php	(revision 0)
@@ -0,0 +1,143 @@
+<?php
+/**
+ * Magento
+ *
+ * NOTICE OF LICENSE
+ *
+ * This source file is subject to the Open Software License (OSL 3.0)
+ * that is bundled with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://opensource.org/licenses/osl-3.0.php
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@magentocommerce.com so we can send you a copy immediately.
+ *
+ * DISCLAIMER
+ *
+ * Do not edit or add to this file if you wish to upgrade Magento to newer
+ * versions in the future. If you wish to customize Magento for your
+ * needs please refer to http://www.magentocommerce.com for more information.
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @copyright   Copyright (c) 2010 Magento Inc. (http://www.magentocommerce.com)
+ * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
+ */
+
+/**
+ * Filesystem helper for Mage_Backup library
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @author      Magento Core Team <core@magentocommerce.com>
+ */
+class Mage_Backup_Filesystem_Helper
+{
+    /**
+     * Constant can be used in getInfo() function as second parameter.
+     * Check whether directory and all files/sub directories are writable
+     *
+     * @const int
+     */
+    const INFO_WRITABLE = 1;
+
+    /**
+     * Constant can be used in getInfo() function as second parameter.
+     * Check whether directory and all files/sub directories are readable
+     *
+     * @const int
+     */
+    const INFO_READABLE  = 2;
+
+    /**
+     * Constant can be used in getInfo() function as second parameter.
+     * Get directory size
+     *
+     * @const int
+     */
+    const INFO_SIZE      = 4;
+
+    /**
+     * Constant can be used in getInfo() function as second parameter.
+     * Combination of INFO_WRITABLE, INFO_READABLE, INFO_SIZE
+     *
+     * @const int
+     */
+    const INFO_ALL       = 7;
+
+    /**
+     * Recursively delete $path
+     *
+     * @param string $path
+     * @param array $skipPaths
+     * @param bool $removeRoot
+     * @throws Mage_Exception
+     */
+    public function rm($path, $skipPaths = array(), $removeRoot = false)
+    {
+        $iterator = new RecursiveIteratorIterator(
+            new Mage_Backup_Filesystem_Iterator_Filter(
+                new RecursiveDirectoryIterator($path),
+                $skipPaths
+            ),
+            RecursiveIteratorIterator::CHILD_FIRST
+        );
+
+
+        foreach ($iterator as $item) {
+            $item->isDir() ? @rmdir($item) : @unlink($item);
+        }
+
+        if ($removeRoot && is_dir($path)) {
+            @rmdir($path);
+        }
+    }
+
+    /**
+     * Get information (readable, writable, size) about $path
+     *
+     * @param string $path
+     * @param int $infoOptions
+     * @param array $skipFiles
+     */
+    public function getInfo($path, $infoOptions = self::INFO_ALL, $skipFiles = array())
+    {
+        $info = array();
+        if ($infoOptions & self::INFO_READABLE) {
+            $info['readable'] = true;
+        }
+
+        if ($infoOptions & self::INFO_WRITABLE) {
+            $info['writable'] = true;
+        }
+
+        if ($infoOptions & self::INFO_SIZE) {
+            $info['size'] = 0;
+        }
+
+        $iterator = new RecursiveIteratorIterator(
+            new Mage_Backup_Filesystem_Iterator_Filter(
+                new RecursiveDirectoryIterator($path),
+                $skipFiles
+            ),
+            RecursiveIteratorIterator::CHILD_FIRST
+        );
+
+
+        foreach ($iterator as $item) {
+            if (($infoOptions & self::INFO_WRITABLE) && !$item->isWritable()) {
+                $info['writable'] = false;
+            }
+
+            if (($infoOptions & self::INFO_READABLE) && !$item->isReadable()) {
+                $info['readable'] = false;
+            }
+
+            if ($infoOptions & self::INFO_SIZE && !$item->isDir()) {
+                $info['size'] += $item->getSize();
+            }
+        }
+
+        return $info;
+    }
+}
Index: lib/Mage/Backup/Filesystem/Iterator/File.php
===================================================================
--- lib/Mage/Backup/Filesystem/Iterator/File.php	(revision 0)
+++ lib/Mage/Backup/Filesystem/Iterator/File.php	(revision 0)
@@ -0,0 +1,112 @@
+<?php
+/**
+ * Magento
+ *
+ * NOTICE OF LICENSE
+ *
+ * This source file is subject to the Open Software License (OSL 3.0)
+ * that is bundled with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://opensource.org/licenses/osl-3.0.php
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@magentocommerce.com so we can send you a copy immediately.
+ *
+ * DISCLAIMER
+ *
+ * Do not edit or add to this file if you wish to upgrade Magento to newer
+ * versions in the future. If you wish to customize Magento for your
+ * needs please refer to http://www.magentocommerce.com for more information.
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @copyright   Copyright (c) 2010 Magento Inc. (http://www.magentocommerce.com)
+ * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
+ */
+
+
+/**
+ * File lines iterator
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @author      Magento Core Team <core@magentocommerce.com>
+ */
+class Mage_Backup_Filesystem_Iterator_File extends SplFileObject
+{
+    /**
+     * The statement that was last read during iteration
+     *
+     * @var string
+     */
+    protected $_currentStatement = '';
+
+    /**
+     * Return current sql statement
+     *
+     * @return string
+     */
+    public function current()
+    {
+        return $this->_currentStatement;
+    }
+
+    /**
+     * Iterate to next sql statement in file
+     */
+    public function next()
+    {
+        $this->_currentStatement = '';
+        while (!$this->eof()) {
+            $line = $this->fgets();
+            if (strlen(trim($line))) {
+                $this->_currentStatement .= $line;
+                if ($this->_isLineLastInCommand($line)) {
+                    break;
+                }
+            }
+        }
+    }
+
+    /**
+     * Return to first statement
+     */
+    public function rewind()
+    {
+        parent::rewind();
+        $this->next();
+    }
+
+    /**
+     * Check whether provided string is comment
+     *
+     * @param string $line
+     * @return bool
+     */
+    protected function _isComment($line)
+    {
+        return $line[0] == '#' || substr($line, 0, 2) == '--';
+    }
+
+    /**
+     * Check is line a last in sql command
+     *
+     * @param string $line
+     * @return bool
+     */
+    protected function _isLineLastInCommand($line)
+    {
+        $cleanLine = trim($line);
+        $lineLength = strlen($cleanLine);
+
+        $returnResult = false;
+        if ($lineLength > 0) {
+            $lastSymbolIndex = $lineLength - 1;
+            if ($cleanLine[$lastSymbolIndex] == ';') {
+                $returnResult = true;
+            }
+        }
+
+        return $returnResult;
+    }
+}
Index: lib/Mage/Backup/Filesystem/Iterator/Filter.php
===================================================================
--- lib/Mage/Backup/Filesystem/Iterator/Filter.php	(revision 0)
+++ lib/Mage/Backup/Filesystem/Iterator/Filter.php	(revision 0)
@@ -0,0 +1,84 @@
+<?php
+/**
+ * Magento
+ *
+ * NOTICE OF LICENSE
+ *
+ * This source file is subject to the Open Software License (OSL 3.0)
+ * that is bundled with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://opensource.org/licenses/osl-3.0.php
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@magentocommerce.com so we can send you a copy immediately.
+ *
+ * DISCLAIMER
+ *
+ * Do not edit or add to this file if you wish to upgrade Magento to newer
+ * versions in the future. If you wish to customize Magento for your
+ * needs please refer to http://www.magentocommerce.com for more information.
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @copyright   Copyright (c) 2010 Magento Inc. (http://www.magentocommerce.com)
+ * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
+ */
+
+/**
+ * Recursive Directory Filter Iterator
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @author      Magento Core Team <core@magentocommerce.com>
+ *
+ * @method RecursiveDirectoryIterator getInnerIterator()
+ * @method SplFileInfo current()
+ */
+class Mage_Backup_Filesystem_Iterator_Filter extends RecursiveFilterIterator
+{
+    /**
+     * Array that is used for filtering
+     *
+     * @var array
+     */
+    protected $_filters;
+
+    /**
+     * Constructor
+     *
+     * @param RecursiveDirectoryIterator $iterator
+     * @param array $filters list of files to skip
+     */
+    public function __construct(RecursiveDirectoryIterator $iterator, array $filters)
+    {
+        parent::__construct($iterator);
+        $this->_filters = $filters;
+    }
+
+    /**
+     * Check whether the current element of the iterator is acceptable
+     *
+     * @return bool
+     */
+    public function accept()
+    {
+        $currentFilename = $this->current()->getFilename();
+
+        if ($currentFilename == '.' || $currentFilename == '..') {
+            return false;
+        }
+
+        foreach ($this->_filters as $filter) {
+            if (false !== strpos($this->current(), $filter)) {
+                return false;
+            }
+        }
+
+        return true;
+    }
+
+    public function getChildren()
+    {
+        return new self($this->getInnerIterator()->getChildren(), $this->_filters);
+    }
+}
Index: lib/Mage/Backup/Filesystem/Rollback/Abstract.php
===================================================================
--- lib/Mage/Backup/Filesystem/Rollback/Abstract.php	(revision 0)
+++ lib/Mage/Backup/Filesystem/Rollback/Abstract.php	(revision 0)
@@ -0,0 +1,57 @@
+<?php
+/**
+ * Magento
+ *
+ * NOTICE OF LICENSE
+ *
+ * This source file is subject to the Open Software License (OSL 3.0)
+ * that is bundled with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://opensource.org/licenses/osl-3.0.php
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@magentocommerce.com so we can send you a copy immediately.
+ *
+ * DISCLAIMER
+ *
+ * Do not edit or add to this file if you wish to upgrade Magento to newer
+ * versions in the future. If you wish to customize Magento for your
+ * needs please refer to http://www.magentocommerce.com for more information.
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @copyright   Copyright (c) 2010 Magento Inc. (http://www.magentocommerce.com)
+ * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
+ */
+
+/**
+ * Filesystem rollback workers abstract class
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @author      Magento Core Team <core@magentocommerce.com>
+ */
+abstract class Mage_Backup_Filesystem_Rollback_Abstract
+{
+    /**
+     * Snapshot object
+     *
+     * @var Mage_Backup_Filesystem
+     */
+    protected $_snapshot;
+
+    /**
+     * Default worker constructor
+     *
+     * @param Mage_Backup_Filesystem $snapshotObject
+     */
+    public function __construct(Mage_Backup_Filesystem $snapshotObject)
+    {
+        $this->_snapshot = $snapshotObject;
+    }
+
+    /**
+     * Main worker's function that makes files rollback
+     */
+    abstract public function run();
+}
Index: lib/Mage/Backup/Filesystem/Rollback/Fs.php
===================================================================
--- lib/Mage/Backup/Filesystem/Rollback/Fs.php	(revision 0)
+++ lib/Mage/Backup/Filesystem/Rollback/Fs.php	(revision 0)
@@ -0,0 +1,78 @@
+<?php
+/**
+ * Magento
+ *
+ * NOTICE OF LICENSE
+ *
+ * This source file is subject to the Open Software License (OSL 3.0)
+ * that is bundled with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://opensource.org/licenses/osl-3.0.php
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@magentocommerce.com so we can send you a copy immediately.
+ *
+ * DISCLAIMER
+ *
+ * Do not edit or add to this file if you wish to upgrade Magento to newer
+ * versions in the future. If you wish to customize Magento for your
+ * needs please refer to http://www.magentocommerce.com for more information.
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @copyright   Copyright (c) 2010 Magento Inc. (http://www.magentocommerce.com)
+ * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
+ */
+
+/**
+ * Rollback worker for rolling back via local filesystem
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @author      Magento Core Team <core@magentocommerce.com>
+ */
+class Mage_Backup_Filesystem_Rollback_Fs extends Mage_Backup_Filesystem_Rollback_Abstract
+{
+    /**
+     * Files rollback implementation via local filesystem
+     *
+     * @see Mage_Backup_Filesystem_Rollback_Abstract::run()
+     * @throws Mage_Exception
+     */
+    public function run()
+    {
+        $snapshotPath = $this->_snapshot->getBackupPath();
+
+        if (!is_file($snapshotPath) || !is_readable($snapshotPath)) {
+            throw new Mage_Backup_Exception_CantLoadSnapshot('Cant load snapshot archive');
+        }
+
+        $fsHelper = new Mage_Backup_Filesystem_Helper();
+
+        $filesInfo = $fsHelper->getInfo(
+            $this->_snapshot->getRootDir(),
+            Mage_Backup_Filesystem_Helper::INFO_WRITABLE,
+            $this->_snapshot->getIgnorePaths()
+        );
+
+        if (!$filesInfo['writable']) {
+            throw new Mage_Backup_Exception_NotEnoughPermissions(
+                'Unable to make rollback because not all files are writable'
+            );
+        }
+
+        $archiver = new Mage_Archive();
+
+        /**
+         * we need these fake initializations because all magento's files in filesystem will be deleted and autoloader
+         * wont be able to load classes that we need for unpacking
+         */
+        new Mage_Archive_Tar();
+        new Mage_Archive_Gz();
+        new Mage_Archive_Helper_File('');
+        new Mage_Archive_Helper_File_Gz('');
+
+        $fsHelper->rm($this->_snapshot->getRootDir(), $this->_snapshot->getIgnorePaths());
+        $archiver->unpack($snapshotPath, $this->_snapshot->getRootDir());
+    }
+}
Index: lib/Mage/Backup/Filesystem/Rollback/Ftp.php
===================================================================
--- lib/Mage/Backup/Filesystem/Rollback/Ftp.php	(revision 0)
+++ lib/Mage/Backup/Filesystem/Rollback/Ftp.php	(revision 0)
@@ -0,0 +1,202 @@
+<?php
+/**
+ * Magento
+ *
+ * NOTICE OF LICENSE
+ *
+ * This source file is subject to the Open Software License (OSL 3.0)
+ * that is bundled with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://opensource.org/licenses/osl-3.0.php
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@magentocommerce.com so we can send you a copy immediately.
+ *
+ * DISCLAIMER
+ *
+ * Do not edit or add to this file if you wish to upgrade Magento to newer
+ * versions in the future. If you wish to customize Magento for your
+ * needs please refer to http://www.magentocommerce.com for more information.
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @copyright   Copyright (c) 2010 Magento Inc. (http://www.magentocommerce.com)
+ * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
+ */
+
+/**
+ * Rollback worker for rolling back via ftp
+ *
+ * @category    Mage
+ * @package     Mage_Backup
+ * @author      Magento Core Team <core@magentocommerce.com>
+ */
+class Mage_Backup_Filesystem_Rollback_Ftp extends Mage_Backup_Filesystem_Rollback_Abstract
+{
+    /**
+     * Ftp client
+     *
+     * @var Mage_System_Ftp
+     */
+    protected $_ftpClient;
+
+    /**
+     * Files rollback implementation via ftp
+     *
+     * @see Mage_Backup_Filesystem_Rollback_Abstract::run()
+     * @throws Mage_Exception
+     */
+    public function run()
+    {
+        $snapshotPath = $this->_snapshot->getBackupPath();
+
+        if (!is_file($snapshotPath) || !is_readable($snapshotPath)) {
+            throw new Mage_Backup_Exception_CantLoadSnapshot('Cant load snapshot archive');
+        }
+
+        $this->_initFtpClient();
+        $this->_validateFtp();
+
+        $tmpDir = $this->_createTmpDir();
+        $this->_unpackSnapshot($tmpDir);
+
+        $fsHelper = new Mage_Backup_Filesystem_Helper();
+
+        $this->_cleanupFtp();
+        $this->_uploadBackupToFtp($tmpDir);
+
+        $fsHelper->rm($tmpDir, array(), true);
+    }
+
+    /**
+     * Initialize ftp client and connect to ftp
+     *
+     * @throws Mage_Backup_Exception_FtpConnectionFailed
+     */
+    protected function _initFtpClient()
+    {
+        try {
+            $this->_ftpClient = new Mage_System_Ftp();
+            $this->_ftpClient->connect($this->_snapshot->getFtpConnectString());
+        } catch (Exception $e) {
+            throw new Mage_Backup_Exception_FtpConnectionFailed($e->getMessage());
+        }
+    }
+
+    /**
+     * Perform ftp validation. Check whether ftp account provided points to current magento installation
+     *
+     * @throws Mage_Exception
+     */
+    protected function _validateFtp()
+    {
+        $validationFilename = '~validation-' . microtime(true) . '.tmp';
+        $validationFilePath = $this->_snapshot->getBackupsDir() . DS . $validationFilename;
+
+        $fh = @fopen($validationFilePath, 'w');
+        @fclose($fh);
+
+        if (!is_file($validationFilePath)) {
+            throw new Mage_Exception('Unable to validate ftp account');
+        }
+
+        $rootDir = $this->_snapshot->getRootDir();
+        $ftpPath = $this->_snapshot->getFtpPath() . DS . str_replace($rootDir, '', $validationFilePath);
+
+        $fileExistsOnFtp = $this->_ftpClient->fileExists($ftpPath);
+        @unlink($validationFilePath);
+
+        if (!$fileExistsOnFtp) {
+            throw new Mage_Backup_Exception_FtpValidationFailed('Failed to validate ftp account');
+        }
+    }
+
+    /**
+     * Unpack snapshot
+     *
+     * @param string $tmpDir
+     */
+    protected function _unpackSnapshot($tmpDir)
+    {
+        $snapshotPath = $this->_snapshot->getBackupPath();
+
+        $archiver = new Mage_Archive();
+        $archiver->unpack($snapshotPath, $tmpDir);
+    }
+
+    /**
+     * @throws Mage_Exception
+     * @return string
+     */
+    protected function _createTmpDir()
+    {
+        $tmpDir = $this->_snapshot->getBackupsDir() . DS . '~tmp-' . microtime(true);
+
+        $result = @mkdir($tmpDir);
+
+        if (false === $result) {
+            throw new Mage_Backup_Exception_NotEnoughPermissions('Failed to create directory ' . $tmpDir);
+        }
+
+        return $tmpDir;
+    }
+
+    /**
+     * Delete magento and all files from ftp
+     */
+    protected function _cleanupFtp()
+    {
+        $rootDir = $this->_snapshot->getRootDir();
+
+        $iterator = new RecursiveIteratorIterator(
+            new Mage_Backup_Filesystem_Iterator_Filter(
+                new RecursiveDirectoryIterator($rootDir),
+                $this->_snapshot->getIgnorePaths()
+            ),
+            RecursiveIteratorIterator::CHILD_FIRST
+        );
+
+        foreach ($iterator as $item) {
+            $ftpPath = $this->_snapshot->getFtpPath() . DS . str_replace($rootDir, '', $item);
+            $ftpPath = str_replace(DS, '/', $ftpPath);
+
+            $this->_ftpClient->delete($ftpPath);
+        }
+    }
+
+    /**
+     * Perform files rollback
+     *
+     * @param string $tmpDir
+     * @throws Mage_Exception
+     */
+    protected function _uploadBackupToFtp($tmpDir)
+    {
+        $iterator = new RecursiveIteratorIterator(
+            new Mage_Backup_Filesystem_Iterator_Filter(
+                new RecursiveDirectoryIterator($tmpDir),
+                $this->_snapshot->getIgnorePaths()
+            ),
+            RecursiveIteratorIterator::SELF_FIRST
+        );
+
+        foreach ($iterator as $item) {
+            $ftpPath = $this->_snapshot->getFtpPath() . DS . str_replace($tmpDir, '', $item);
+            $ftpPath = str_replace(DS, '/', $ftpPath);
+
+            if ($item->isLink()) {
+                continue;
+            }
+
+            if ($item->isDir()) {
+                $this->_ftpClient->mkdirRecursive($ftpPath);
+            } else {
+                $result = $this->_ftpClient->put($ftpPath, $item);
+                if (false === $result) {
+                    throw new Mage_Backup_Exception_NotEnoughPermissions('Failed to upload file '
+                        . $item . ' to ftp');
+                }
+            }
+        }
+    }
+}
Index: lib/Mage/System/Ftp.php
===================================================================
--- lib/Mage/System/Ftp.php	(revision 0)
+++ lib/Mage/System/Ftp.php	(revision 0)
@@ -0,0 +1,509 @@
+<?php
+/**
+ * Magento
+ *
+ * NOTICE OF LICENSE
+ *
+ * This source file is subject to the Open Software License (OSL 3.0)
+ * that is bundled with this package in the file LICENSE.txt.
+ * It is also available through the world-wide-web at this URL:
+ * http://opensource.org/licenses/osl-3.0.php
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@magentocommerce.com so we can send you a copy immediately.
+ *
+ * DISCLAIMER
+ *
+ * Do not edit or add to this file if you wish to upgrade Magento to newer
+ * versions in the future. If you wish to customize Magento for your
+ * needs please refer to http://www.magentocommerce.com for more information.
+ *
+ * @category    Mage
+ * @package     Mage_System
+ * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
+ * @license     http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
+ */
+
+/**
+ * Class to work with remote FTP server
+ *
+ * @category    Mage
+ * @package     Mage_System
+ * @author      Magento Core Team <core@magentocommerce.com>
+ */
+class Mage_System_Ftp
+{
+
+    /**
+     * Connection object
+     *
+     * @var resource
+     */
+    protected $_conn = false;
+
+    /**
+     * Check connected, throw exception if not
+     *
+     * @throws Exception
+     * @return void
+     */
+    protected function checkConnected()
+    {
+        if(!$this->_conn) {
+            throw new Exception(__CLASS__." - no connection established with server");
+        }
+    }
+
+    /**
+     * ftp_mkdir wrapper
+     *
+     * @param sting $name
+     * @return unknown_type
+     */
+    public function mdkir($name)
+    {
+        $this->checkConnected();
+        return @ftp_mkdir($this->_conn, $name);
+    }
+
+    /**
+     * Make dir recursive
+     *
+     * @param string $path
+     * @param int $mode
+     * @return bool
+     */
+    public function mkdirRecursive($path, $mode = 0777)
+    {
+        $this->checkConnected();
+        $dir = explode("/", $path);
+        $path= "";
+        $ret = true;
+        for ($i=0; $i < count($dir); $i++) {
+            $path .= "/" .$dir[$i];
+            if(!@ftp_chdir($this->_conn, $path)) {
+                @ftp_chdir($this->_conn,"/");
+                if(!@ftp_mkdir($this->_conn,$path)) {
+                    $ret=false;
+                    break;
+                } else {
+                    @ftp_chmod($this->_conn, $mode, $path);
+                }
+            }
+        }
+        return $ret;
+    }
+
+    /**
+     * Try to login to server
+     *
+     * @param string $login
+     * @param string $password
+     * @throws Exception on invalid login credentials
+     * @return bool
+     */
+    public function login($login = "anonymous", $password = "")
+    {
+        $this->checkConnected();
+        $res = @ftp_login($this->_conn, $login, $password);
+        if(!$res) {
+            throw new Exception("Invalid login credentials");
+        }
+        return $res;
+    }
+
+    /**
+     * Validate connection string
+     *
+     * @param string $string
+     * @throws Exception
+     * @return string
+     */
+    public function validateConnectionString($string)
+    {
+        $data = @parse_url($string);
+        if(false === $data) {
+            throw new Exception("Connection string invalid: '{$string}'");
+        }
+        if($data['scheme'] != 'ftp') {
+            throw new Exception("Support for scheme unsupported: '{$data['scheme']}'");
+        }
+        return $data;
+    }
+
+    /**
+     * Connect to server using connect string
+     * Connection string: ftp://user:pass@server:port/path
+     * user,pass,port,path are optional parts
+     *
+     * @param string $string
+     * @param int $timeout
+     */
+    public function connect($string, $timeout = 900)
+    {
+        $params = $this->validateConnectionString($string);
+        $port = isset($params['port']) ? intval($params['port']) : 21;
+
+        $this->_conn = ftp_connect($params['host'], $port, $timeout);
+
+        if(!$this->_conn) {
+            throw new Exception("Cannot connect to host: {$params['host']}");
+        }
+        if(isset($params['user']) && isset($params['pass'])) {
+            $this->login($params['user'], $params['pass']);
+        } else {
+            $this->login();
+        }
+        if(isset($params['path'])) {
+            if(!$this->chdir($params['path'])) {
+                throw new Exception ("Cannot chdir after login to: {$params['path']}");
+            }
+        }
+    }
+
+    /**
+     * ftp_fput wrapper
+     *
+     * @param string $remoteFile
+     * @param resource $handle
+     * @param int $mode  FTP_BINARY | FTP_ASCII
+     * @param int $startPos
+     * @return bool
+     */
+    public function fput($remoteFile, $handle, $mode = FTP_BINARY, $startPos = 0)
+    {
+        $this->checkConnected();
+        return @ftp_fput($this->_conn, $remoteFile, $handle, $mode, $startPos);
+    }
+
+    /**
+     * ftp_put wrapper
+     *
+     * @param string $remoteFile
+     * @param string $localFile
+     * @param int $mode FTP_BINARY | FTP_ASCII
+     * @param int $startPos
+     * @return bool
+     */
+    public function put($remoteFile, $localFile, $mode = FTP_BINARY, $startPos = 0)
+    {
+        $this->checkConnected();
+        return ftp_put($this->_conn, $remoteFile, $localFile, $mode, $startPos);
+    }
+
+    /**
+     * Get current working directory
+     *
+     * @return mixed
+     */
+    public function getcwd()
+    {
+        $d = $this->raw("pwd");
+        $data = explode(" ", $d[0], 3);
+        if(empty($data[1])) {
+            return false;
+        }
+        if(intval($data[0]) != 257) {
+            return false;
+        }
+        $out = trim($data[1], '"');
+        if($out !== "/") {
+            $out = rtrim($out, "/");
+        }
+        return $out;
+    }
+
+    /**
+     * ftp_raw wrapper
+     *
+     * @param string $cmd
+     * @return mixed
+     */
+    public function raw($cmd)
+    {
+        $this->checkConnected();
+        return @ftp_raw($this->_conn, $cmd);
+    }
+
+    /**
+     * Upload local file to remote
+     *
+     * Can be used for relative and absoulte remote paths
+     * Relative: use chdir before calling this
+     *
+     * @param srting $remote
+     * @param string $local
+     * @param int $dirMode
+     * @param int $ftpMode
+     * @return unknown_type
+     */
+    public function upload($remote, $local, $dirMode = 0777, $ftpMode = FTP_BINARY)
+    {
+        $this->checkConnected();
+
+        if(!file_exists($local)) {
+            throw new Exception("Local file doesn't exist: {$localFile}");
+        }
+        if(!is_readable($local)) {
+            throw new Exception("Local file is not readable: {$localFile}");
+        }
+        if(is_dir($local)) {
+            throw new Exception("Directory given instead of file: {$localFile}");
+        }
+
+        $globalPathMode = substr($remote, 0, 1) == "/";
+        $dirname = dirname($remote);
+        $cwd = $this->getcwd();
+        if(false === $cwd) {
+            throw new Exception("Server returns something awful on PWD command");
+        }
+
+        if(!$globalPathMode) {
+            $dirname = $cwd."/".$dirname;
+            $remote = $cwd."/".$remote;
+        }
+        $res = $this->mkdirRecursive($dirname, $dirMode);
+        $this->chdir($cwd);
+
+        if(!$res) {
+            return false;
+        }
+        return $this->put($remote, $local, $ftpMode);
+    }
+
+    /**
+     * Download remote file to local machine
+     *
+     * @param string $remote
+     * @param string $local
+     * @param int $ftpMode  FTP_BINARY|FTP_ASCII
+     * @return bool
+     */
+    public function download($remote, $local, $ftpMode = FTP_BINARY)
+    {
+        $this->checkConnected();
+        return $this->get($local, $remote, $ftpMode);
+    }
+
+    /**
+     * ftp_pasv wrapper
+     *
+     * @param bool $pasv
+     * @return bool
+     */
+    public function pasv($pasv)
+    {
+        $this->checkConnected();
+        return @ftp_pasv($this->_conn, (bool) $pasv);
+    }
+
+    /**
+     * Close FTP connection
+     *
+     * @return void
+     */
+    public function close()
+    {
+        if($this->_conn) {
+            @ftp_close($this->_conn);
+        }
+    }
+
+    /**
+     * ftp_chmod wrapper
+     *
+     * @param $mode
+     * @param $remoteFile
+     * @return bool
+     */
+    public function chmod($mode, $remoteFile)
+    {
+        $this->checkConnected();
+        return @ftp_chmod($this->_conn, $mode, $remoteFile);
+    }
+
+    /**
+     * ftp_chdir wrapper
+     *
+     * @param string $dir
+     * @return bool
+     */
+    public function chdir($dir)
+    {
+        $this->checkConnected();
+        return @ftp_chdir($this->_conn, $dir);
+    }
+
+    /**
+     * ftp_cdup wrapper
+     *
+     * @return bool
+     */
+    public function cdup()
+    {
+        $this->checkConnected();
+        return @ftp_cdup($this->_conn);
+    }
+
+    /**
+     * ftp_get wrapper
+     *
+     * @param string $localFile
+     * @param string $remoteFile
+     * @param int $fileMode         FTP_BINARY | FTP_ASCII
+     * @param int $resumeOffset
+     * @return bool
+     */
+    public function get($localFile, $remoteFile, $fileMode = FTP_BINARY, $resumeOffset = 0)
+    {
+        $remoteFile = $this->correctFilePath($remoteFile);
+        $this->checkConnected();
+        return @ftp_get($this->_conn, $localFile, $remoteFile, $fileMode, $resumeOffset);
+    }
+
+    /**
+     * ftp_nlist wrapper
+     *
+     * @param string $dir
+     * @return bool
+     */
+    public function nlist($dir = "/")
+    {
+        $this->checkConnected();
+        $dir = $this->correctFilePath($dir);
+        return @ftp_nlist($this->_conn, $dir);
+    }
+
+    /**
+     * ftp_rawlist wrapper
+     *
+     * @param string $dir
+     * @param bool $recursive
+     * @return mixed
+     */
+    public function rawlist( $dir = "/", $recursive = false )
+    {
+        $this->checkConnected();
+        $dir = $this->correctFilePath($dir);
+        return @ftp_rawlist($this->_conn, $dir, $recursive);
+    }
+
+    /**
+     * Convert byte count to float KB/MB format
+     *
+     * @param int $bytes
+     * @return string
+     */
+    public static function byteconvert($bytes)
+    {
+        $symbol = array('B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB');
+        $exp = floor( log($bytes) / log(1024) );
+        return sprintf( '%.2f ' . $symbol[ $exp ], ($bytes / pow(1024, floor($exp))) );
+    }
+
+    /**
+     * Chmod string "-rwxrwxrwx" to "777" converter
+     *
+     * @param string $chmod
+     * @return string
+     */
+    public static function chmodnum($chmod)
+    {
+        $trans = array('-' => '0', 'r' => '4', 'w' => '2', 'x' => '1');
+        $chmod = substr(strtr($chmod, $trans), 1);
+        $array = str_split($chmod, 3);
+        return array_sum(str_split($array[0])) . array_sum(str_split($array[1])) . array_sum(str_split($array[2]));
+    }
+
+    /**
+     * Check whether file exists
+     *
+     * @param string $path
+     * @param bool $excludeIfIsDir
+     * @return bool
+     */
+    public function fileExists($path, $excludeIfIsDir = true)
+    {
+        $path = $this->correctFilePath($path);
+        $globalPathMode = substr($path, 0, 1) == "/";
+
+        $file = basename($path);
+        $dir = $globalPathMode ? dirname($path) : $this->getcwd()."/".$path;
+        $data = $this->ls($dir);
+        foreach($data as $row) {
+            if($file == $row['name']) {
+                if($excludeIfIsDir && $row['dir']) {
+                    continue;
+                }
+                return true;
+            }
+        }
+        return false;
+    }
+
+    /**
+     * Get directory contents in PHP array
+     *
+     * @param string $dir
+     * @param bool $recursive
+     * @return array
+     */
+    public function ls($dir = "/", $recursive = false)
+    {
+        $dir= $this->correctFilePath($dir);
+        $rawfiles = (array) $this->rawlist($dir, $recursive);
+        $structure = array();
+        $arraypointer = &$structure;
+        foreach ($rawfiles as $rawfile) {
+            if ($rawfile[0] == '/') {
+                $paths = array_slice(explode('/', str_replace(':', '', $rawfile)), 1);
+                $arraypointer = &$structure;
+                foreach ($paths as $path) {
+                    foreach ($arraypointer as $i => $file) {
+                        if ($file['name'] == $path) {
+                            $arraypointer = &$arraypointer[ $i ]['children'];
+                            break;
+                        }
+                    }
+                }
+            } elseif(!empty($rawfile)) {
+                $info = preg_split("/[\s]+/", $rawfile, 9);
+                $arraypointer[] = array(
+                    'name'   => $info[8],
+                    'dir'  => $info[0]{0} == 'd',
+                    'size'   => (int) $info[4],
+                    'chmod'  => self::chmodnum($info[0]),
+                    'rawdata' => $info,
+                    'raw'     => $rawfile
+                );
+            }
+        }
+        return $structure;
+    }
+
+    /**
+     * Correct file path
+     *
+     * @param string $str
+     * @return string
+     */
+    public function correctFilePath($str)
+    {
+        $str = str_replace("\\", "/", $str);
+        $str = preg_replace("/^.\//", "", $str);
+        return $str;
+    }
+
+    /**
+     * Delete file
+     *
+     * @param string $file
+     * @return bool
+     */
+    public function delete($file)
+    {
+        $this->checkConnected();
+        $file = $this->correctFilePath($file);
+        return @ftp_delete($this->_conn, $file);
+    }
+}
Index: skin/adminhtml/default/default/boxes.css
===================================================================
--- skin/adminhtml/default/default/boxes.css	(revision 142292)
+++ skin/adminhtml/default/default/boxes.css	(working copy)
@@ -90,9 +90,9 @@
     position:fixed;
     top:45%;
     left:50%;
-    width:120px;
-    margin-left:-60px;
-    padding:15px 60px;
+    width:150px;
+    margin-left:-105px;
+    padding:15px 30px;
     background:#fff4e9;
     border:2px solid #f1af73;
     color:#d85909;
@@ -134,6 +134,9 @@
 .grid th                        { white-space:nowrap; }
 .grid td.editable input.input-text { width:50px !important; margin-left:4px !important; }
 .grid td input.input-text       { width:86%; }
+.grid td input.input-text-export-filter { width:272px; }
+.grid td input.input-text-range { width:104px; }
+.grid td input.input-text-range-date { width:87px; }
 .grid td input.input-inactive   { background:#eee; }
 .grid table td                  { border-width:0 1px 1px 0; border-color:#dadfe0; border-style:solid; }
 .grid table.border td           { background:#fff !important; }
@@ -205,7 +208,9 @@
 .grid tr.filter .range select    { float:right; width:56px !important; margin-top:0; }
 .grid tr.filter .range .label    { display:block; width:36px; float:left; padding-left:2px; }
 .grid tr.filter .date img        { width:15px; height:15px; cursor:pointer; vertical-align:middle; }
-.grid .head-massaction select    { width:50px !important; }
+.grid .head-massaction select    { width:auto !important; max-width:90px; }
+.grid select.select-export-filter,
+.grid select.multiselect-export-filter { width:278px; }
 
 /* Grid Footer */
 .grid table tfoot tr            { background:#D7E5EF; }
@@ -270,7 +275,7 @@
 ul.tabs-horiz                   { margin:0 0 18px 0; background:url(images/horiz_tabs_ul_bg.gif) repeat-x 0 100% #f8f8f8; padding:8px 0 0 5px; }
 ul.tabs-horiz li                { float:left; margin:0 4px; }
 ul.tabs-horiz li a              { display:block; background:#e2e2e2; border:1px solid #ccc; padding:2px 10px; color:#333 !important; text-decoration:none !important; }
-ul.tabs-horiz li a.notloaded    { color:#999 !important; }
+ul.tabs-horiz li a.notloaded    { /* not used for now */ }
 ul.tabs-horiz li a.active       { border-bottom:1px solid #fff; background:#fff; }
 
 
@@ -335,6 +340,7 @@
 label.inline                            { float:none !important; width:auto !important; }
 .nested-content .entry-edit             { margin-left:2em; }
 .nested-content .entry-edit .entry-edit { margin-left:0; }
+#coupon_container .entry-edit { min-width:310px; }
 
 /* Form Elements */
 input.input-text,textarea,select { border-width:1px; border-style:solid; border-color:#aaa #c8c8c8 #c8c8c8 #aaa; background:#fff; font:12px arial, helvetica, sans-serif; }
@@ -352,8 +358,11 @@
 .field-100 { background-color:#fff; border-width:1px; border-style:solid; border-color:#aaa #c8c8c8 #c8c8c8 #aaa; padding:2px; }
 .field-100 textarea,
 .field-100 input.input-text { float:left; width:100% !important; border:0 !important; padding:0 !important; }
+@media screen and (-webkit-min-device-pixel-ratio:0) {
+    select option:disabled,
+    select:disabled option { color:#c9c9c9!important;color:#cacaca!important; text-shadow:2px 2px 2px #000; }
+}
 
-
 /* Form List */ /* Table for default form data */
 .form-list                      { width:auto; border:0 !important; }
 .form-list td.label,
@@ -369,6 +378,7 @@
 .form-list td.value textarea    { width:274px; }
 .form-list td.value textarea    { height:15em; }
 .form-list td.value select      { width:280px; }
+.form-list td.value select.select-date { width:87px; }
 .form-list td.note              { background:url(images/note_cell_bg.gif) 6px 10px no-repeat !important; padding-left:18px; }
 .form-list td.scope-label       { padding-left:5px; color:#6f8992; font-size:.9em; }
 .form-list p.note               { margin:0; padding:0 0 0 13px; background:url(images/note_bg.gif) 1px 6px no-repeat; font-size:11px; }
@@ -376,13 +386,13 @@
 .columns .form-list             { width:auto; }
 .columns .form-list td.value    { width:280px; padding-right:5px !important; }
 .columns .form-list td.value .next-toinput { width:75px; display:inline; margin-right:5px; }
-.columns .form-list td.value .next-toselect input.input-text { width:180px; display:inline; }
+.columns .form-list td.value .next-toselect input.input-text { width:195px!important; display:inline; }
 
 .fieldset-wide .form-list { width:100% !important; }
 .fieldset-wide .form-list td.value { width:auto !important; }
 .fieldset-wide .form-list td.value input.input-text,
 .fieldset-wide .form-list td.value textarea { width:98% !important; }
-.fieldset-wide .form-list td.value select { display:block; }
+/*.fieldset-wide .form-list td.value select { display:block; }*/
 .fieldset-wide .form-list td.scope-label { white-space:nowrap; width:1px; }
 .fieldset-wide .form-list td.note { width:120px; }
 
@@ -403,7 +413,7 @@
 
 /* Form Button */
 .content-buttons.form-buttons,
-.content-header .form-buttons   { text-align:right; margin-bottom:0; white-space:nowrap; }
+.content-header .form-buttons   { text-align:right; margin-bottom:0; }
 .content-header .content-buttons-placeholder { display:inline !important; }
 .content-header .form-buttons   { float:right; }
 .content-header td.form-buttons   { float:none; }
@@ -414,6 +424,7 @@
 button:hover                    { background:#f77c16 url(images/btn_over_bg.gif) repeat-x 0 0; }
 button:active                   { background:#f77c16 url(images/btn_on_bg.gif) repeat-x 0 0; }
 button span                     { line-height:1.35em; background-repeat:no-repeat; background-position:0 50%; }
+button span span                { background:none !important; padding:0 !important; margin:0 !important; display:inline !important; }
 button.delete,
 button.save,
 button.add                      { padding-left:6px; }
@@ -424,12 +435,18 @@
 button.back span,
 button.add-image span,
 button.add-widget span { padding-left:20px; }
+/* Google Chrome specific fix for empty buttons */
+button.add span:after,
+button.delete span:after { display:inline-block; clear:both; content:"."; font-size:0; line-height:0; height:0; overflow:hidden; }
 button.back { border-color:#ccc #aaa #aaa #ccc; background-color:#fff; background-image:url(images/btn_back_bg.gif); color:#555; }
 button.back span { background-image:url(images/icon_btn_back.gif); }
+button.fail,
 button.cancel,
 button.delete { border-color:#d24403 #a92000 #a92000 #d24403; background-image:url(images/cancel_btn_bg.gif); background-color:#fcaf81; color:#fff; }
+button.fail:hover,
 button.cancel:hover,
 button.delete:hover { background-image:url(images/cancel_btn_over_bg.gif); }
+button.fail:active,
 button.cancel:active,
 button.delete:active { background-image:url(images/cancel_btn_active_bg.gif); background-color:#e0612f; }
 button.cancel span,
@@ -442,12 +459,17 @@
 button.add-variable span { background-image:url(images/btn_add-variable_icon.gif); padding-left:26px; }
 button.go span { background-image:url(images/btn_go.gif); padding-left:16px; }
 button.btn-chooser { display:block; margin:0 0 10px; }
+button.success { background-image:url(images/btn_gr_bg.gif); border-color:#46745E; }
+button.success:hover { background:url(images/btn_gr_over.gif) #6cac46; }
+button.success:active { background:url(images/btn_gr_on.gif) repeat-x 0 0 #3fa05e; }
 
 button.disabled,
 button.disabled:hover,
 button.disabled:active { border-color:#777 #505050 #505050 #777; background:#919191 url(images/btn_bg-disabled.gif) 0 0 repeat-x; color:#fff; cursor:default; opacity:.8; -ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=20)"; }
 button.add.disabled span { background-image:url(images/add_btn_icon-disabled.gif); }
 
+button.loading > span { padding-left:20px; background-image: url(images/btn_loading-icon.gif) !important;}
+
 button.icon-btn { width:32px !important; }
 button.icon-btn span { text-indent:-999em; display:block; width:16px; padding:0; overflow:hidden; }
 
@@ -458,9 +480,18 @@
 /* SWITCHER
 *******************************************************************************/
 .switcher { margin-bottom:10px; border:1px solid #cddddd; background:#e7efef; padding:10px; }
-.side-col .switcher select { width:100%; }
+.side-col .switcher { padding-right:26px; }
+.side-col .switcher label { display:block; }
+.side-col .switcher .link-store-scope { float:right; margin-right:-19px; margin-left:3px; }
+.side-col .switcher select { width:100%; float:left; }
 /*.side-col .switcher     { margin-right:20px; margin-bottom:20px; }*/
 .catalog-categories .side-col .switcher { margin-right:0; margin-bottom:15px; }
+.link-store-scope { display:inline-block; vertical-align:middle; margin:0 0 1px; width:16px; height:16px; background:url(images/i_question-mark.png) 0 0 no-repeat; text-decoration:none !important; text-indent:-999em; overflow:hidden; }
+.store-scope .link-store-scope { float:left; margin-right:10px; }
+.store-scope .tree-store-scope { float:left; padding:7px 10px; border:1px dotted #dedede; }
+.store-scope table.stores-tree { float:left; width:auto !important; }
+.form-list td.value .store-scope { white-space:nowrap; }
+.form-list td.value .link-store-scope { float:none; margin-right:0; vertical-align:top; margin-top:6px; }
 
 
 /* SPACE
@@ -693,7 +724,24 @@
 .login-container .legal                 { margin:0; background:url(images/login_box_legal_bg.gif) no-repeat; padding:8px 8px 5px 8px; font-size:.95em; }
 .login-form .validation-advice          { margin:3px 0 0 0; }
 .login-form .forgot-link                { margin:0 17px 0 0; text-align:right; }
+.login-form .captcha                    { padding:10px 0 0; }
+.login-form .captcha-image              { border:1px solid #aaa; margin:1.5em 0 0; position:relative; }
+.login-form .captcha-image img          { vertical-align:bottom; }
+.login-form .captcha-reload             { cursor:pointer; position: absolute; top:2px; right:2px; }
+.login-form .captcha-reload.refreshing  { animation:rotate 1.5s infinite linear; -webkit-animation:rotate 1.5s infinite linear; -moz-animation:rotate 1.5s infinite linear; }
 
+@-webkit-keyframes rotate {
+    0% { -webkit-transform:rotate(0); }
+    0% { -webkit-transform:rotate(360deg); }
+}
+@-moz-keyframes rotate {
+    0% { -moz-transform:rotate(0); }
+    0% { -moz-transform:rotate(360deg); }
+}
+@keyframes rotate {
+    0% { transform:rotate(0); }
+    0% { transform:rotate(360deg); }
+}
 
 
 /* DASHBOARD
@@ -758,9 +806,10 @@
 
 .entry-edit .order-address td.label label { width:100px; }
 .entry-edit .order-address input.input-text,
-.entry-edit .order-address .textarea    { width:95% !important; }
-.entry-edit .order-address .select      { width:96.5%; }
-.order-search-items .entry-edit .grid   { height:610px; overflow:auto; }
+.entry-edit .order-address .textarea     { width:95% !important; }
+.entry-edit .order-address .select       { width:96.5%; }
+.entry-edit .order-address .validate-vat { text-align:right; padding:10px 0 0; width:96%; }
+.order-search-items .entry-edit .grid    { height:610px; overflow:auto; }
 .order-search-items .entry-edit .grid table { width:99.9%; }
 /* .create-order-totals                 { background:url(images/bg_create_order_totals.gif) repeat-y 50% 0 !important; } */
 
@@ -990,8 +1039,10 @@
 .x-tree-node { margin:0 !important; }
 .x-tree-node .leaf .x-tree-node-icon        { background-image:url(images/fam_leaf.png); }
 .x-tree-node .system-leaf .x-tree-node-icon { background-image:url(images/fam_application_form_delete.png); }
+.x-tree-node-ct { overflow:hidden; }
 
 /* Product - Websites */
+.website-name .checkbox                 { vertical-align:top; margin-top:2px; }
 .webiste-groups                         { padding:10px 20px; }
 .group-stores                           { padding:2px 10px; }
 
@@ -1423,6 +1474,19 @@
 #catalog-wysiwyg-editor .magento_message { padding:0 7px; }
 #catalog-wysiwyg-editor .magento_buttons { padding-left:7px; padding-right:7px; }
 
+/* Backups */
+.backup-dialog { background-color:#6f8992; background:rgba(111, 137, 146, 0.5); cursor:default; left:50%; margin:0 0 0 -271px; position:fixed; top:50%; width:470px; padding:8px; z-index:400; -moz-box-shadow:0 0 100px #ccc; -webkit-box-shadow:0 0 100px #ccc; box-shadow:0 0 100px #ccc; }
+.backup-dialog .entry-edit { border:1px solid #6f8992; }
+.backup-dialog .content { background:#fff; border-bottom:1px solid #ccc; max-height:400px; overflow:auto; }
+.backup-dialog .question {margin-top: 15px;}
+.backup-dialog .buttons-set { border-top:1px solid #ddd; background:#eee; margin:0; overflow:hidden; padding:7px 10px 8px; width:448px; }
+.backup-dialog .buttons-set button { margin:0 0 0 5px; }
+.backup-dialog #ftp-credentials-container {margin-top: 25px;}
+.backup-dialog .password-box-container {margin-top: 15px;}
+.backup-dialog #ftp-credentials-container fieldset {margin-bottom: 0;}
+.backup-dialog input[type=text], .backup-dialog input[type=password] {width: 180px}
+.backup-dialog .exclude-media-checkbox-container {margin-top: 15px;}
+.backup-dialog td.maintenance-checkbox-container {margin-top: 0; padding-top: 4px;}
 
 /*****************************************/
 /******** ALIGNMENTS AND CLEARS **********/
@@ -1455,6 +1519,7 @@
 .normal             { font-weight:normal !important; }
 
 /* Clear */ /* This keeps our HTML free of buncha clearing elements */
+.side-col .switcher:after,
 .message-popup .message-popup-head:after,
 .message-popup .message-popup-content .message:after,
 .login-form .form-buttons:after,
@@ -1486,4 +1551,5 @@
 .notification-global:after,
 .files .row:after,
 .files-wide .row:after,
-.grid tr.filter .range .range-line:after { display:block; clear:both; content:"."; font-size:0; line-height:0; height:0; overflow:hidden; }
+.grid tr.filter .range .range-line:after,
+.store-scope:after { display:block; clear:both; content:"."; font-size:0; line-height:0; height:0; overflow:hidden; }
