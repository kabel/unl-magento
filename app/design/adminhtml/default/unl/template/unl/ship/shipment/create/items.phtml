<div class="grid np">
  <div class="hor-scroll">
    <table cellspacing="0" class="data order-tables" id="package_items_table">
        <col />
        <col width="1" />
        <col width="100" />
        <col width="250" />
        <thead>
            <tr class="headings">
                <th><?php echo $this->helper('sales')->__('Product') ?></th>
                <th class="a-center"><?php echo $this->helper('sales')->__('Qty') ?></th>
                <th><?php echo $this->helper('sales')->__('Weight') ?></th>
                <th class="last"><?php echo $this->helper('sales')->__('Package(s)') ?></th>
            </tr>
        </thead>
        <?php $_items = $this->getOrder()->getAllItems() ?>
        <?php $_i=0;foreach ($_items as $_item): if ($_item->getIsVirtual() || $_item->isDummy(true)): continue; endif; $_i++ ?>
        <tbody class="<?php echo $_i%2?'odd':'even' ?>">
            <?php echo $this->getItemHtml($_item) ?>
        </tbody>
        <?php endforeach; ?>
    </table>
  </div>
</div>
<script type="text/javascript">
//<![CDATA[
var packageItemControl = {
	split: function(evt) {
		var el = Event.element(evt),
		container = el.up('table').select('.package-item-container')[0];
		var rowTemplate = "<tr>" + container.childElements()[0].innerHTML + "</tr>";
		container.insert({bottom: rowTemplate});
		var children = container.childElements();
		var newRow = children[children.length-1];
		var packageSelect = newRow.select('.package-item-package')[0];
		var packageQty = newRow.select('.package-item-qty')[0];
		packageQty.setValue('');
		packageSelect.selectedIndex = 0;
		this._bindPackageChange(packageSelect);
		this._bindTextChange(packageQty);

	},
	_bindTextChange: function(el) {
		el.observe('change', function(evt) {
			var el = Event.element(evt), row = el.up('tr');
			var idxs = [];
			row.select('.package-item-package').each(function(el) {
				if ($F(el) && idxs.indexOf($F(el)) < 0) {
					idxs.push($F(el));
				}
			});
			for (var i=0; i < idxs.length; i++) {
				this.recalculatePackageWeight(idxs[i]);
			}
		}.bind(this));
	},
	_bindPackageChange: function(el) {
		el.observe('change', function(evt) {
			var el = Event.element(evt), idx = $F(el);
			if (idx) {
				this.recalculatePackageWeight(idx);
			}
			if (el.previousValue && $('package_weight_' + el.previousValue)) {
				this.recalculatePackageWeight(el.previousValue);
			}
			el.previousValue = idx;
		}.bind(this));
	},
	recalculatePackageWeight: function(idx) {
		var packageWeight = $('package_weight_' + idx), packageDefWeight = $('package_weight_extra_' + idx), packageItemCount = $('package_item_count_' + idx);
		if (parseFloat($F(packageDefWeight))) {
			packageWeight.update(parseFloat($F(packageDefWeight)));
		} else {
			packageWeight.update('0');
		}

		var uniqItems = [];
		$('package_items_table').select('.package-item-package').each(function(el) {
			if ($F(el) != idx) {
				return true;
			}
			var qty = parseFloat($F(el.up('tr').select('.package-item-qty')[0]));
			if (!qty || qty < 0) {
				return true;
			}

			var itemRow = el.up('tr', 1);
			if (uniqItems.indexOf(itemRow) < 0) {
				uniqItems.push(itemRow);
			}
			var weight = parseFloat($F(itemRow.select('.package-item-weight')[0]));
			packageWeight.update(parseFloat(packageWeight.innerHTML) + (weight * qty));
		});
		packageItemCount.update(uniqItems.length);
	},
	initialize: function() {
		$('package_items_table').select('.package-item-weight').each(function(el) {
			this._bindTextChange(el);
		}.bind(this));
		$('package_items_table').select('.package-item-qty').each(function(el) {
			this._bindTextChange(el);
		}.bind(this));
		$('package_items_table').select('.package-item-package').each(function(el) {
			this._bindPackageChange(el);
		}.bind(this));
	}
};
packageItemControl.initialize();
//]]>
</script>
<br />

<div class="entry-edit">
	<div class="entry-edit-head"><h4><?php echo $this->__('Packages') ?></h4></div>
    <?php echo $this->getChildHtml('packages') ?>
</div>
<br />

<div class="box-left entry-edit" id="shipment_comments">
    <div class="entry-edit-head"><h4><?php echo $this->__('Shipment Comments') ?></h4></div>
    <fieldset>
        <div id="order-history_form">
            <span class="field-row">
                <label class="normal" for="shipment_comment_text"><?php echo Mage::helper('sales')->__('Shipment Comments') ?></label>
                <textarea id="shipment_comment_text" name="shipment[comment_text]" rows="3" cols="5" style="height:6em; width:99%;"></textarea>
            </span>
            <div class="clear"></div>
        </div>
    </fieldset>
</div>

<div class="box-right entry-edit" id="shipment_totals">
    <div class="order-totals">
        <div class="order-totals-bottom">
          <?php if ($this->canSendShipmentEmail()): ?>
          <p>
              <label class="normal" for="notify_customer"><?php echo Mage::helper('sales')->__('Append Comments') ?></label>
              <input id="notify_customer" name="shipment[comment_customer_notify]" value="1" type="checkbox" />
          </p>
          <p>
              <label class="normal" for="send_email"><?php echo Mage::helper('sales')->__('Email Copy of Shipment') ?></label>
              <input id="send_email" name="shipment[send_email]" value="1" type="checkbox" checked="checked" />
          </p>
          <?php endif; ?>
          <div class="a-right">
              <?php echo $this->getChildHtml('submit_button') ?>
          </div>
        </div>
    </div>
</div>
<div class="clear"></div>
<script type="text/javascript">
//<![CDATA[
var printAllLabels = function(evt, href) {
	var printwindow = window.open(href);
	setTimeout(function() {printwindow.print();}, 2500);
	return true;
};
var editFormPreSubmit = function() {
	if (!$('package_items_table').select('.package-item-package').any(function(el) {
		return $F(el) && parseFloat($F(el.up('tr').select('.package-item-qty')[0])) > 0;
	})) {
		alert('<?php echo Mage::helper('sales')->__('At least 1 package item is required') ?>');
		return false;
	}

	if (!editForm.validate()) {
		return false;
	}

	disableElements('submit-button');
	disableElements('add-package-button');
	disableElements('split-item-button');

	var packageSuccess = function() {
		Form.getElements('edit_form').each(function(elem) {
			elem.disabled = true;
		});
		$$('.box-left, .box-right').each(function(elem) {
			new Effect.BlindUp(elem, {duration:0.5});
		});
		$$('.delete-package-option').each(function(elem) {
			elem.remove();
		});

	};
	var packageFailure = function () {
		enableElements('submit-button');
        enableElements('add-package-button');
        enableElements('split-item-button');
	};
	var params = $('edit_form').serialize(true);
	var action = $('edit_form').action;
	var url = action + (action.match(new RegExp('\\?')) ? '&isAjax=true' : '?isAjax=true');
	new Ajax.Request(url, {
		parameters: params,
		onSuccess: function(transport) {
            try {
                if (transport.responseText.isJSON()) {
                    var response = transport.responseText.evalJSON();
                    if (response.error) {
                        alert(response.message);
                    }
                    if(response.ajaxExpired && response.ajaxRedirect) {
                        setLocation(response.ajaxRedirect);
                    }

                    $('messages').update();
                    var msgTemplate = new Template('<li class="#{type}-msg"><ul><li>#{message}</li></ul></li>');
                    $A(response.messages).each(function(msg) {
                        $('messages').insert({bottom: '<ul class="messages">' + msgTemplate.evaluate(msg) + '</ul>' });
                    });
                    Effect.ScrollTo('messages', {offset:-20, duration:0.5});
                    if (response.result == 0 || response.result == 2) {
						packageSuccess();
						if (response.result == 0) {
							$$('.form-buttons')[0].insert(response.button);
							$H(response.packages).each(function(pair) {
								var trackingTd = $('package_index_' + pair.key).up('tr').select('td.last')[0];
								trackingTd.removeClassName('a-center');
								if (!pair.value) {
									trackingTd.update(Translator.translate('Failed'));
									return true;
								}
								trackingTd.update(pair.value.content);
							});
						}
                    } else {
						packageFailure();
                    }
                } else {
                    packageFailure();
                    alert(Translator.translate('Something went wrong. Please try again.'));
                    console.log(transport.responseText);
                }
            } catch (e) {
                console.log(e);
            }
        },
        onFailure: function(transport) {
            packageFailure();
        	alert(Translator.translate('Something went wrong. Please try again later.'));
        }
	});
};

(function() {
var sendEmailCheckbox = $('send_email');
if (sendEmailCheckbox) {
    var notifyCustomerCheckbox = $('notify_customer');
    var shipmentCommentText = $('shipment_comment_text');
    Event.observe(sendEmailCheckbox, 'change', bindSendEmail);
    bindSendEmail();
}
function bindSendEmail()
{
    if (sendEmailCheckbox.checked == true) {
        notifyCustomerCheckbox.disabled = false;
        //shipmentCommentText.disabled = false;
    }
    else {
        notifyCustomerCheckbox.disabled = true;
        //shipmentCommentText.disabled = true;
    }
}
})();
//]]>
</script>
